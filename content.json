{"meta":{"title":"Life is Like A Boat","subtitle":"Silent","description":"Android AI DeepLearning","author":"AiLo","url":"https://ailo.fun","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"04-24","excerpt":""},{"title":"about","text":"Android Developer————AiLo。做过音视频编解码、相机开发。业余时间学习了解过深度学习，做过OCR图片识别项目。","path":"about/index.html","date":"04-24","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"03-11","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"04-24","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"10-11","excerpt":""}],"posts":[{"title":"compose快码一编--气泡升起和水滴下坠动画","text":"原创文章，转载请联系作者 摘要今天用compose来构建一个气泡上升粘连动画和水滴下坠动画,Github源码点击这里,欢迎大家start 知识点 compose动画 贝塞尔曲线 缓动函数 compose canvas 解析 compose动画使用updateTransition,理由是： updateTransition可以管理多个动画作为子项，并且可以在多个状态间同时运行 这个动画恰巧需要维护两个状态，自定义状态数据Circle和Bubble 贝塞尔曲线，两个动画球之前的粘连效果使用贝塞尔曲线达成，目前android提供了二阶和三阶的贝塞尔曲线，在此处作动画够用了 ==缓动函数== 动画当然是越接近现实中的物理规则越好看 ++缓动函数++自定义参数随时间变化的规律，特定的缓动函数有助于动画的良好构建 compose中提供了Easing来做差值器，常见的有：compose内置的EaseIN) 所有效果都由canvas画出，就是一些主要的canvas的api的熟练度问题 代码实现 其实这种动画在工程实装的时候，比较麻烦的一个点就是状态的管理，可能会写不少的代码用来维护以及表示当前动画的状态。使用updateTransition这个api的好处就是可以借用它的参数targetState来帮我们管理维护当前动画的状态。 12345678910111213141516val transition &#x3D; updateTransition(targetState &#x3D; currentState, label &#x3D; &quot;Water&quot;)val durationMillis &#x3D; 1111val progress by transition.animateFloat(label &#x3D; &quot;Water&quot;, transitionSpec &#x3D; &#123; when &#123; WaterState.Circle isTransitioningTo WaterState.Bubble -&gt; TweenSpec(durationMillis &#x3D; durationMillis, easing &#x3D; EaseOutBounce) else -&gt; TweenSpec(durationMillis &#x3D; durationMillis, easing &#x3D; EaseOutExpo) &#125;&#125;) &#123; when (it) &#123; WaterState.Bubble -&gt; 1f WaterState.Circle -&gt; -0.2f &#125;&#125; 在这段代码里我们维护了两个状态，并且在不同的状态切换间使用了不同的transitionSpec 动画绘制结构 两种状态下的动画结构都是一致的，跟qq的粘连小球动画结构一样，两个圆形以及中间联结的两段贝塞尔曲线 circle to bubble1234567891011121314151617181920212223242526272829303132333435363738394041424344val fixCircleCenterX &#x3D; centerXval fixCircleCenterY &#x3D; centerYval currentCircleRadius &#x3D; pointRadius * (1f - linearProgress)drawCircle( color &#x3D; pointColor, radius &#x3D; currentCircleRadius, center &#x3D; Offset(x &#x3D; fixCircleCenterX, y &#x3D; fixCircleCenterY))val bubbleCenterX &#x3D; centerXval currentDist &#x3D; gap * linearProgress * 1.25fval bubbleCenterY &#x3D; fixCircleCenterY - currentDistval linearChangeBubbleCenterY &#x3D; fixCircleCenterY - gap * linearProgress * 1.25fval iAnchorX &#x3D; bubbleCenterXval iAnchorY &#x3D; (fixCircleCenterY + linearChangeBubbleCenterY) * 0.5fval linearChangedBubbleRadius &#x3D; pointRadius + (bubbleRadius - pointRadius) * linearProgressval currentBubbleRadius &#x3D; pointRadius + (bubbleRadius - pointRadius) * progressval angel &#x3D; 30.0val iBubStartX &#x3D; bubbleCenterX + currentBubbleRadius * cos(angel * Math.PI &#x2F; 180).toFloat()val iBubStartY &#x3D; bubbleCenterY + currentBubbleRadius * sin(angel * Math.PI &#x2F; 180).toFloat()val iBubEndX &#x3D; bubbleCenterX + currentBubbleRadius * cos((180 - angel) * Math.PI &#x2F; 180).toFloat()val iBubEndY &#x3D; bubbleCenterY + currentBubbleRadius * sin((180 - angel) * Math.PI &#x2F; 180).toFloat()val circleAngel &#x3D; -angelval iFixCircleStartX &#x3D; fixCircleCenterX + currentCircleRadius * cos(circleAngel * Math.PI &#x2F; 180).toFloat()val iFixCircleStartY &#x3D; fixCircleCenterY + currentCircleRadius * sin(circleAngel * Math.PI &#x2F; 180).toFloat()val iFixCircleEndX &#x3D; fixCircleCenterX + currentCircleRadius * cos((180 - circleAngel) * Math.PI &#x2F; 180).toFloat()val iFixCircleEndY &#x3D; fixCircleCenterY + currentCircleRadius * sin((180 - circleAngel) * Math.PI &#x2F; 180).toFloat()path.reset()path.moveTo(iBubStartX, iBubStartY)path.quadraticBezierTo(iAnchorX, iAnchorY, iFixCircleStartX, iFixCircleStartY)path.lineTo(iFixCircleEndX, iFixCircleEndY)path.quadraticBezierTo(iAnchorX, iAnchorY, iBubEndX, iBubEndY)path.close()drawPath(path &#x3D; path, color &#x3D; pointColor)drawOval( color &#x3D; pointColor, topLeft &#x3D; Offset(bubbleCenterX - linearChangedBubbleRadius, linearChangeBubbleCenterY - linearChangedBubbleRadius), size &#x3D; Size(linearChangedBubbleRadius * 2, currentBubbleRadius * 2)) 用drawOval画椭圆的api来画圆形，主要是为了实现动画末端圆形在y轴上的形变,剩下的bubble to circle的动画与上面类似。 源代码链接 欢迎大家留言讨论star","path":"2023/01/15/2023-01-10compose-water-anim/","date":"01-15","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"},{"name":"Compose","slug":"Compose","permalink":"https://ailo.fun/tags/Compose/"}]},{"title":"Kotlin碎片解析——泛型","text":"Kotlin碎片解析————泛型泛型的out、in、wherekotlin语言作为android生态中的一个重要一环，也承继了部分java的特效，譬如这个——泛型。作为一种编译时期的特性，泛型很大程度把类型转换错误这个问题解决了。在kotlin语言中，泛型依然适用，同时也保留了java泛型中的上下界特性。 outout可以看成java泛型中的上界通配符，简单理解就是就是这个泛型之下的子类都使用于当下： 123val a: A&lt;View&gt; &#x3D; A&lt;TextView&gt;()class A&lt;out T&gt; 需要注意的是，out只能应用于类或者接口，在方法上是无法应用的 in相应地，in可以看作java泛型中的下界通配符，就是这个类型就是下限了，往上都是可以的 123val a: A&lt;TextView&gt; &#x3D; A&lt;View&gt;()class A&lt;in T&gt; 与out相同，in不能作用于方法 where限定多个上界 12345class A&lt;T&gt; where T : Button,T : Serializable&#123;&#125;fun &lt;T&gt; test(t: T) where T : CharSequence, T : TextView &#123;&#125; where可作用于类或者函数 ##以上","path":"2020/02/20/2020-02-20kotlin-0/","date":"02-20","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"}]},{"title":"Camera2录制视频(二)：MediaCodeC+OpenGL视频编码","text":"原创文章，未经作者允许不得转载 秋风清，秋月明叶叶梧桐槛外声难教归梦成 MediaLearn 欢迎大家关注我的项目MediaLearn，这是一个以学习分享音视频知识为目的建立的项目，目前仅局限于Android平台，后续会逐渐扩展。对音视频领域知识感兴趣的朋友，欢迎一起来学习！！！ 在上一篇文章Camera2录制视频(一)：音频的录制及编码,主要分享了使用Camera2搭配MediaCodeC和MediaMuxer进行视频录制中的音频录制部分。那么在这篇文章中呢，就着手分析使用MediaCodeC完成视频的录制编码和MediaMuxer完成Mux视频合成模块。有关使用MediaCodeC硬编码对视频编解码的相关视频，我之前也有分享，想看的朋友们可以点击以下传送门回顾。 MediaCodeC硬编码将图片集编码为视频Mp4文件MediaCodeC编码视频MediaCodeC将视频完整解码，并存储为图片文件。使用两种不同的方式，硬编码解码视频MediaCodeC解码视频指定帧硬编码解码指定帧 概述 项目中使用的摄像头API为Camera2 在文章开始之前，依然是老规矩，我们从结果导向，梳理流程。看看在视频录制这个阶段，流程是如何运作的，数据在这其中发生了什么变化。 流程梳理当设备的摄像头在运转时，sensor【传感器】会将光信号转为电信号，再转为数字信号。sensor会输出四种格式的图片格式：YUV、RGB、RAW RGB DATA(DNG格式)、JPEG。YUV是最常用的一种格式，YUV输出的数据中亮度信号是无损的，RGB会有一定的损耗会丢掉一些原始信息。而RAW DATA是最原始的信息，但是存储空间会变大，而且需要一些特定软件才能打开。在废弃的摄像头API——Camera中，默认的预览回调数据格式就是NV21。而在Camera2中，函数只提供了Surface作为桥接对象。若是想获取YUV、或者JPEG和RAW_SENSOR的话，可以使用ImageReader提供的Surface，再通过监听获取图像信息。不管是Camera还是Camera2，都是支持设置Surface的。通过Surface，我们可以将Camera拿到的数据直接输送到GPU通过OpenGL来渲染处理。这样可以不用再CPU中处理Camera帧数据，从而节省大量时间。好了，接下来我用一张流程图，来展示MediaCodeC如何编码Camera帧数据的。 1、因为我们需要的是H264数据，所以需要给MediaCodeC配置Mime为video/avc 2、MediaCodeC配置好之后，通过createInputSurface创建出一个作输入的Input—Surface 3、将Input-surface作为参数，配置Android平台EGL环境的windowSurface 4、创建OpenGL的program程序，得到一个可用的纹理ID，从而构建出一个SurfaceTexture。这个对象可以提供给已经废弃的CameraAPI，也可以构建出一个Surface提供给Camera2API。 通过以上操作，我们就可以把Camera采集的数据直接传入到GPU，不用在CPU中费力的处理一番。 代码实现在上一篇文章我提到过，会将整个视频录制中涉及到的各个功能模块化，以供后续复用。那么在视频的录制编码这块，我将它分装为了一个Runnable——VideoRecorder。VideoRecorder的内部职责为，封装了MediaCodeC+OpenGL编码的流程。对外提供OpenGL纹理的Surface，和硬编码编码后的ByteBuffer、以及BufferInfo和其他视频帧相关的信息。 1234567891011121314151617181920212223242526&#x2F;&#x2F; MediaCodeC配置codec.configure(mediaFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE)val s &#x3D; codec.createInputSurface()val surfaceTexture &#x3D; encodeCore.buildEGLSurface(s)inputSurface &#x3D; Surface(surfaceTexture)&#x2F;&#x2F; 构建一个搭载了OpenGL纹理的Surface，然后回调出去readySurface.invoke(inputSurface)&#x2F;&#x2F; 开始编码codec.start()&#x2F;&#x2F; 计时val startTime &#x3D; System.nanoTime()&#x2F;&#x2F; 使用数组来保持视频录制线程和音频录制线程以及Mux线程的同步while (isRecording.isNotEmpty()) &#123; &#x2F;&#x2F; 编码数据 drainEncoder(false) frameCount++ &#x2F;&#x2F; OpenGL 绘制 encodeCore.draw() val curFrameTime &#x3D; System.nanoTime() - startTime encodeCore.swapData(curFrameTime)&#125;&#x2F;&#x2F; 发送编码结束信号drainEncoder(true) 以上伪代码代表了视频编码的全部流程，首先我们需要配置一个合适的MediaCodeC，通过MediaCodeC的codec.createInputSurface函数得到一个Surface对象，前文我称之为InputSurface。然后配置EGL环境，构建OpenGLProgram。【有关OpenGL相关的代码，我都封装到了SurfaceEncodeCore这个类里面。SurfaceEncodeCore的内部职责主要是：构建EGL环境，配置OpenGL程序，绘制纹理】。OpenGL本身是不负责窗口管理和上下文环境管理的，这个功能由各自平台提供。Android里负责为OpenGL提供窗口管理和上下文环境管理的就是EGL。在EGL里，是使用EGLSurface将输出渲染到设备屏幕。而创建EGLSurface有两种方式，一种是创建一个可实际显示的Surface，通过eglCreateWindowSurface函数，而这个函数需要一个Surface作为参数。另一个是通过eglCreatePbufferSurface创建一个离屏Surface。至此，MediaCodeC的输入渠道就搭建完毕，这个渠道会在录制期间，不停接受Camera回调的数据，并通过OpenGLProgram处理。我们只需要从MediaCodeC源源不断地提取出已经编码好的H264码流，对外回调视频帧数据即可。函数drainEncoder的实现为： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748fun MediaCodec.handleOutputBuffer(bufferInfo: MediaCodec.BufferInfo, defTimeOut: Long, formatChanged: () -&gt; Unit &#x3D; &#123;&#125;, render: (bufferId: Int) -&gt; Unit, needEnd: Boolean &#x3D; true) &#123; loopOut@ while (true) &#123; &#x2F;&#x2F; 获取可用的输出缓存队列 val outputBufferId &#x3D; dequeueOutputBuffer(bufferInfo, defTimeOut) Log.d(&quot;handleOutputBuffer&quot;, &quot;output buffer id : $outputBufferId &quot;) if (outputBufferId &#x3D;&#x3D; MediaCodec.INFO_TRY_AGAIN_LATER) &#123; if (needEnd) &#123; break@loopOut &#125; &#125; else if (outputBufferId &#x3D;&#x3D; MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &#123; formatChanged.invoke() &#125; else if (outputBufferId &gt;&#x3D; 0) &#123; render.invoke(outputBufferId) if (bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM !&#x3D; 0) &#123; break@loopOut &#125; &#125; &#125;&#125;private fun drainEncoder(isEnd: Boolean &#x3D; false) &#123; if (isEnd) &#123; codec.signalEndOfInputStream() &#125; codec.handleOutputBuffer(bufferInfo, 2500, &#123; if (!isFormatChanged) &#123; outputFormatChanged.invoke(codec.outputFormat) isFormatChanged &#x3D; true &#125; &#125;, &#123; val encodedData &#x3D; codec.getOutputBuffer(it) if (bufferInfo.flags and MediaCodec.BUFFER_FLAG_CODEC_CONFIG !&#x3D; 0) &#123; bufferInfo.size &#x3D; 0 &#125; if (bufferInfo.size !&#x3D; 0) &#123; Log.d(TAG, &quot;buffer info offset $&#123;bufferInfo.offset&#125; time is $&#123;bufferInfo.presentationTimeUs&#125; &quot;) encodedData.position(bufferInfo.offset) encodedData.limit(bufferInfo.offset + bufferInfo.size) Log.d(TAG, &quot;sent &quot; + bufferInfo.size + &quot; bytes to muxer&quot;) dataCallback.invoke(frameCount, bufferInfo.presentationTimeUs, bufferInfo, encodedData) &#125; codec.releaseOutputBuffer(it, false) &#125;, !isEnd) &#125; 这是MediaCodeC处理输出数据的老一套代码了，根据dequeueOutputBuffer返回的ID，确认目前编码器处于何种状态。再分别加以处理，将得到的原始数据对外回调。 混合器Mux模块至此为止，整个视频录制功能中，视频录制编码模块完成、音频录制编码模块完成，只需要一个Mux模块。将其余两个模块提供的数据，串联起来输出Mp4文件即可。在Mux模块中，已经没有什么技术含量了，具体工作就是，维护了两个数据队列。一个是视频帧队列，另一个是音频帧队列。Mux模块无限循环地从两个队列中提取队列首端数据。然后比较视频帧数据和音频帧数据中的时间戳大小，将时间小的先行封装即可。具体代码可参考Muxer 123456789101112131415161718192021222324252627282930313233mediaMuxer &#x3D; MediaMuxer(p, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4)&#x2F;&#x2F; 添加视频轨val videoTrackId &#x3D; mediaMuxer!!.addTrack(videoTrack)&#x2F;&#x2F; 添加音频轨val audioTrackId &#x3D; mediaMuxer!!.addTrack(audioTrack)mediaMuxer!!.start()while (isRecording.isNotEmpty()) &#123; &#x2F;&#x2F; 从队列中提取首端数据 val videoFrame &#x3D; videoQueue.firstSafe val audioFrame &#x3D; audioQueue.firstSafe val videoTime &#x3D; videoFrame?.bufferInfo?.presentationTimeUs ?: -1L val audioTime &#x3D; audioFrame?.bufferInfo?.presentationTimeUs ?: -1L &#x2F;&#x2F; 比较音频帧和视频帧的时间戳 if (videoTime &#x3D;&#x3D; -1L &amp;&amp; audioTime !&#x3D; -1L) &#123; writeAudio(audioTrackId) &#125; else if (audioTime &#x3D;&#x3D; -1L &amp;&amp; videoTime !&#x3D; -1L) &#123; writeVideo(videoTrackId) &#125; else if (audioTime !&#x3D; -1L &amp;&amp; videoTime !&#x3D; -1L) &#123; &#x2F;&#x2F; 先写小一点的时间戳的数据 if (audioTime &lt; videoTime) &#123; &#x2F;&#x2F; 封装音频帧数据 writeAudio(audioTrackId) &#125; else &#123; &#x2F;&#x2F; 封装视频帧数据 writeVideo(videoTrackId) &#125; &#125; else &#123; &#x2F;&#x2F; do nothing &#125;&#125; Camera2视频尺寸选择好了。整个视频录制全部功能已全部整理完毕。接下来我们分析一个视频的尺寸选择问题，以及Camera2中使我迷惑的点————如何选择视频尺寸？在Android官方文档中，要想获取Camera2摄像头数据，必须依靠Surface。To capture or stream images from a camera device, the application must first create a camera capture session with a set of output Surfaces for use with the camera device, with createCaptureSession(SessionConfiguration).。Camera2会根据你配置的Surface来匹配相应的尺寸，Each Surface has to be pre-configured with an appropriate size and format (if applicable) to match the sizes and formats available from the camera device，每一个Surface都必须提前配置好相应的尺寸，以便去匹配Camera2合适的Size。Camera2在配置的时候，会返回一个可供选择的尺寸集合，表示当前设备摄像头所支持的所有尺寸。我在测试视频录制时，测试设备返回的尺寸列表如下： 那么OK。既然知道了支持的尺寸，那么我在配置MediaCodeC的时候，设置的宽高从这里面选择就ok了，就不用再进一步的图像处理了。可是实际我试验的结果却不理想，在MediaCodeC设置第一个尺寸的时候，录制的视频画面毫无变形。可选择其他尺寸譬如720 X 960、720 X 1280却变形严重。可当我选择1088 X 1088 或者 960 X 960，这种等宽高尺寸时，录制的画面却毫无变形。对此我也是毫无头绪，因为摸不清楚Surface匹配的尺寸机制问题，在OpenGL绘制的时候，就不知道该如何裁剪，这才是大问题。如果有解决这个问题的朋友，希望能给我提一些建议。做视频图像处理的时候，我走了一些弯路【手动狗头】。之前我错误的判定了Surface尺寸的来源，导致在视频尺寸这里进行了不正确的逻辑判断。事实上使用SurfaceTexture的setDefaultBufferSize函数可以达到尺寸匹配。但相应的，Camera2返回的size是宽高相反的，所以这里的setDefaultBufferSize的宽高也是相反的才能匹配。 以上","path":"2019/06/21/2019-06-21-camera2-video/","date":"06-21","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"音视频","slug":"音视频","permalink":"https://ailo.fun/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"}]},{"title":"Camera2录制视频(一)：音频的录制及编码","text":"原创文章，未经作者允许不得转载 山黛远，月波长暮云秋影蘸潇湘醉魂应逐凌波梦，分付西风此夜凉https://github.com/JadynAi/MediaLearn/blob/feature-0.9/mediakit在Android开发方面，音视频占据了不小领域。对于想往这方面了解的小伙伴们，往往不知道从何处下手开始学习。我接触音视频开发有一段日子，作为自己学习的回顾和补充，也一直在记录一些音视频开发的博客。对往期博客有兴趣的朋友们可以先了解一二。MediaCodeC硬编码将图片集编码为视频Mp4文件MediaCodeC编码视频MediaCodeC将视频完整解码，并存储为图片文件。使用两种不同的方式，硬编码解码视频MediaCodeC解码视频指定帧硬编码解码指定帧 概述最近再次回顾所学，觉得还有许多不足。遂决定写几篇小总结，以Android平台录制视频项目为例，整理自己的音视频开发知识。如果有小伙伴想学习音视频开发，但又不知道从何着手，可以模仿博主做一个相关的Demo来学习。本文的项目地址入口在Camera2Record入口界面，业务功能实现在Camera2Recorder。在这个项目中，我会尽可能地将音视频涉及到的功能模块化，减少耦合性。让这些零散的功能尽可能的适应更多的业务场景。 API项目中视频方面采用的技术逻辑为： 使用Camera2API，配合MediaCodeC + Surface + OpenGL将原始帧数据编码为H264码流 音频方面采用技术逻辑为: AudioRecord录音，MediaCodeC将PCM数据编码为AAC数据 音视频编码使用的是MediaMuxer，将视频帧数据和音频帧数据封装为MP4文件。整体而言涉及到的API有： MediaCodeC AudioRecord MediaMuxer OpenGL（不用详细了解） 架构设计【注1】作为一个简单的音视频录制应用，并没有什么花哨的功能（暂时没有，以后会慢慢追加）。整体业务逻辑就是直截了当的录制视频 ——&gt; 产出视频。业务再细分的话，主要有三个部分：一是画面，即视频部分；二是声音，即音频部分；三是混合器，即将视频和音频混合，并生成视频文件。将业务略作区分后，我们由结果向前反推，既然要生成MP4文件，那么需要提供一些什么数据呢？所以我们根据输出——即混合器部分，梳理各个模块的详细功能。 视频封装在混合器模块，使用了Android提供的MediaMuxer作为视频封装输出工具。MediaMuxer支持三种输出格式，分别为MP4、Webm和3GP文件，本次项目的混合器输出自然选择的是MP4文件。MP4是MPEG-4的官方容器格式定义的广义文件扩展名，可以流媒体化并支持众多多媒体的内容：多音轨、视频流、字幕、图片、可变帧率、码率【注2】。在制作MP4文件时，应该优先选用MPEG-4标准下的视频/音频格式，一般来说，对于MP4容器的封装，相对而言比较常见的有两种编码方式： H264视频编码，AAC音频编码 Xvid视频编码，MP4音频编码 视频编码算法在本项目中，博主采用的视频编码算法为H264。H264作为压缩率最高的视频压缩格式，与其他编码格式相比，同等画面质量，体积最小。它有两个名称，一个是沿用ITU_T组织的H.26x名称——H.264；另一个是MPEG-4AVC，AVC即为高级视频编码，而MP4格式则是H264编码制定使用的标准封装格式【注3】。 音频编码算法博主采用的音频编码算法为AAC。AAC可以同时支持48个音轨，15个低频音轨，相比MP3，AAC可以在体积缩小30%的前提下提供更好的音质【注4】。AAC最初是基于MPEG-2的音频编码技术，后来MPEG_4标准出台，AAC重新集成了其他技术，变更为现在的MPEG-4 AAC标准。一般而言，目前常用的AAC编码指代的就是MPEG-4 AAC。MPEG-4 AAC有六种子规格： MPEG-4 AAC LC 低复杂度规格（Low Complexity）—现在的手机比较常见的MP4文件中的音频部份就包括了该规格音频文件 MPEG-4 AAC Main 主规格 注：包含了除增益控制之外的全部功能，其音质最好 MPEG-4 AAC SSR 可变采样率规格（Scaleable SampleRate） MPEG-4 AAC LTP 长时期预测规格（Long TermPredicition） MPEG-4 AAC LD 低延迟规格（Low Delay） MPEG-4 AAC HE高效率规格（HighEfficiency）—这种规格用于低码率编码，有NeroACC 编码器支持 目前最流行的就是LC和HE了。需要注意的是MPEG-4 AAC LC这种规格为“低复杂度规格”，一般应用于中等码率。而中等码率，一般指96kbps~192kbps，所以如果使用了LC编码，请将码率控制在这个范围内会比较好一点。 工作流程将业务逻辑梳理清楚之后，那么各个模块更具体的功能就清晰了很多。这里有一个大致的工作流程图以作参考：先从视频模块开始，VideoRecorder运行在一个独立的工作线程，使用OpenGL+Surface+MediaCodeC对接Camera2，接受相机回调画面并编码为H264码流。这个类对外回调可用的视频帧数据VideoPacket对象。这个数据类型是工程中自行定义的对象，封装了这一帧视频的数据——ByteArray类型，以及这一帧数据携带的信息——BufferInfo:主要是这一帧的时间戳以及其他。接下来是音频模块，考虑到录音模块或许日后有机会复用，所以将录音模块单独分离出来。AudioRecorder在开始录制后不停运行，对外回调PCM原始数据——ByteArray类型。AudioRecord类可以对外提供两种类型，ShortArray和ByteArray，因为视频对外的数据类型为ByteArray，所以这里也选择了ByteArray。这一段PCM数据会被添加到一个外部的链表中，而AudioEncoder音频编码模块，也持有PCM数据链表。在开始录制后，AudioEncoder不断循环地从PCM链表中提取数据，编码为AAC格式的原始帧数据。这里的AAC原始数据，指的是没有添加ADTS头信息的数据。与此同时，视频模块输出的视频帧数据和音频模块输出的AAC音频帧数据，会被提交到Mux模块中，在这个模块中，持有两个视频帧数据和音频帧数据的链表。Mux模块会不断循环地从这两个链表中提取数据，使用MediaMuxer将帧数据封装到各自的轨上，最终输出MP4文件。 音频录制及编码音频模块分为录音以及编码两个小模块，分别运行在两个独立的工作线程。录音模块不用多提，完全是基于AudioRecord的二次封装，这里是代码地址AudioRecorder。这里主要说一下音频编码模块AudioEncoder，音频录制模块在运行后拿到可用PCM数据并回调到外部，封装到一个线程安全的链表中。而AudioEncoder则会不停地从链表中提取数据，再使用MediaCodeC将PCM数据编码为AAC格式的音频帧数据。由于MediaMuxer封装AAC音频轨，并不需要ADTS头信息，所以AudioEncoder得到的AAC原始帧数据也无须再作二次处理了。 123456789101112131415161718192021222324252627282930313233343536373839404142 var presentationTimeUs &#x3D; 0L val bufferInfo &#x3D; MediaCodec.BufferInfo() &#x2F;&#x2F; 循环的拿取PCM数据，编码为AAC数据。 while (isRecording.isNotEmpty() || pcmDataQueue.isNotEmpty()) &#123; val bytes &#x3D; pcmDataQueue.popSafe() bytes?.apply &#123; val (id, inputBuffer) &#x3D; codec.dequeueValidInputBuffer(1000) inputBuffer?.let &#123; totalBytes +&#x3D; size it.clear() it.put(this) it.limit(size) &#x2F;&#x2F; 当输入数据全部处理完，需要向Codec发送end——stream的Flag codec.queueInputBuffer(id, 0, size , presentationTimeUs, if (isEmpty()) MediaCodec.BUFFER_FLAG_END_OF_STREAM else 0) &#x2F;&#x2F; 1000000L&#x2F; 总数据 &#x2F; audio channel &#x2F; sampleRate presentationTimeUs &#x3D; 1000000L * (totalBytes &#x2F; 2) &#x2F; format.sampleRate &#125; &#125; loopOut@ while (true) &#123; &#x2F;&#x2F; 获取可用的输出缓存队列 val outputBufferId &#x3D; dequeueOutputBuffer(bufferInfo, defTimeOut) if (outputBufferId &#x3D;&#x3D; MediaCodec.INFO_TRY_AGAIN_LATER) &#123; break@loopOut &#125; else if (outputBufferId &#x3D;&#x3D; MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &#123; &#x2F;&#x2F; audio format changed &#125; else if (outputBufferId &gt;&#x3D; 0) &#123; if (bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM !&#x3D; 0) &#123; break@loopOut &#125; val outputBuffer &#x3D; codec.getOutputBuffer(it) if (bufferInfo.size &gt; 0) &#123; frameCount++ dataCallback.invoke(outputBuffer, bufferInfo) &#125; codec.releaseOutputBuffer(it, false) &#125; &#125;&#125; 这里的工作流程是这样的：只有PCM链表中有数据，MediaCodeC就会将这些数据填入到可用的输入队列中。每一段PCM的数据长度并不一定是一帧音频数据所对应的长度，所以工程要做的是，不停地想编码器输入数据，而编码器也需要不停地往外输出数据，直至将编码器内部的输入数据编码完毕。还有一个需要注意的点，就是MediaCodec当输入数据全部填充完毕时，需要发送一个==BUFFER_FLAG_END_OF_STREAM==标示，用来标示数据输入END。如果没有发送这个标示的话，那么编码完后的音频数据会丢失掉最后一小段时间的音频。除此之外，还有一个很重要的点，就是AAC编码的时间戳计算问题，相关部分的知识请阅读博主之前的博客解决AAC编码时间戳问题 未完待续由于篇幅有限，这篇文章只分享了音频的编码，在下一篇文章里博主会分享视频的录制和编码~~以上 相关文章Camera2录制视频(二)：MediaCodeC+OpenGL视频编码 注 1、本文的架构设计部分参考了《音视频开发进阶指南》—— 实现一款视频录制应用章节 2、参考资料Mp4编码全介绍 3、参考资料音视频封装格式、编码格式知识 4、参考资料AAC音频编码格式介绍","path":"2019/06/01/2019-06-01-camera2-record1/","date":"06-01","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"音视频","slug":"音视频","permalink":"https://ailo.fun/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"}]},{"title":"解决MediaMuxer编码AAC文件时间戳计算","text":"原创文章，转载请联系作者 西北望乡何处是，东南见月几回圆。https://github.com/JadynAi/MediaLearn/blob/feature-0.9/mediakit昨风一吹无人会，今夜清光似往年。 主题音频是流式数据，并不像视频一样有P帧和B帧的概念。就像砌墙一样，咔咔往上摞就行了。一般来说，AAC编码中生成文件这一步，如果使用的是OutputStream流写入文件的话，就完全不需要计算时间。但在音视频同步或者使用Android自带的MediaMuxer来生成音频文件时，就需要计算音频帧的时间戳。 参考本文所涉及到的计算方法和API，为在Android环境下。使用AudioRecord音频录制，MediaCodeC编码AAC格式音频，同时使用MediaMuxer封装AAC格式音频文件。 方法AAC编码有两种计算时间戳的方式。第一种：使用PCM的数据量来计算；第二种：计算出AAC编码相应参数配置下，一帧的持续时间，再配合帧数来计算。 AAC编码、MediaMuxer生成文件伪代码MediaCodeC的AAC编码流程不再赘述，这里用伪代码来代替。主要是为了体现在代码何处设置时间戳： 12345678&#x2F;&#x2F; MediaCodeC获得可用输入队列index &#x3D; codeC.dequeueInputBuffer(......)&#x2F;&#x2F; 当获取到可用输出队列时，我们将获取的PCM数据填入inputBuffer &#x3D; codec.getInputBuffer(index)&#x2F;&#x2F; 将PCM数据（ByteArray）填充到InputBufferinputBuffer.put(byteAarray——PCM数据)codec.queueInputBuffer(index, 0, byteArray的size , presentationTimeUs, 0) 在以上的伪代码中，presentationTimeUs就是需要我们设置时间戳的地方 填充PCM数据后，在得到MediaCodeC输出后，使用MedaMuxer写入数据，生成AAC文件。 12345678910111213path &#x3D; 输出路径。后缀aac、或者mp4mediaMuxer&#x3D; MediaMuxer(path, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4)mediaMuxer.addTrack(音频轨)mediaMuxer.start()&#x2F;&#x2F; codec拿到可用的输出数据。这些数据就是AAC格式的音频数据id &#x3D; codec.dequeueOutputBuffer(bufferInfo, 10000)if(id &gt;&#x3D; 0)&#123; outputBuffer &#x3D; codec.getOutputBuffer(id) mediaMuxer.writeSamplet(audioTrack, outputBuffer, bufferInfo) &#125; 需要注意的是：使用MediaMuxer生成AAC音频文件时，不需要添加AAC头信息，直接写入即可。MediaMuxer写入文件时，BufferInfo这个参数就包含了这一帧数据的偏移、以及时间戳等信息。 更加完整的音频编码代码，请参考GitHub地址AudioEncoder 使用PCM的数据量来计算PCM是没有经过压缩的纯音频数据，我之前写过一篇音频入门的文章初识音频，记录了一些PCM相关的常识问题，感兴趣的可以去看看。PCM作为最原始的音频数据，可以根据大小来计算出时间，先给出公式： 1presentationTimeUs &#x3D; 1000000L * (totalBytes &#x2F; 2) &#x2F; sampleRate 这是配置为采样率sampletRate、采样位数为16bit、单声道的PCM文件时间戳计算方式 接下来我们来分析以上公式的计算由来：假设有一段PCM文件，采样率为S,采样位数为n–(一般 采样位数的选择有4bit、8bit、16bit、32bit)，声道为单声道。那么在1s内，这段PCM的大小为： 12size &#x3D; S * n * 1,单位为bit 众所周知，1 Byte = 8bit, 1 Short = 16bit。那么单位时间内，PCM的大小为: 123以byte为单位 &#x3D; S * n * 1 &#x2F; 8以short为单位 &#x3D; S * n * 1 &#x2F; 16 那么根据以上就可得到，配置参数为采样率sampleRate、16bit、声道为1的PCM文件，当传入编码器的总大小达到totalByte时，时间戳的计算方式： 123currents (微妙) &#x3D; totalByte &#x2F; (sampleRate * 16 * 1 &#x2F; 8) &#x3D; totalByte &#x2F; 2 &#x2F; sampleRate * 1000000L 当然如果选择以ShortArray来承载PCM数据的话，那么公式则变为: 12currents (微妙) &#x3D; totalShort &#x2F; (sampleRate * 16 * 1 &#x2F; 16) &#x3D; totalShort &#x2F; sampletRate * 1000000L 使用AAC帧时间计算当编码器每输出一次数据，即可视作输出一帧AAC数据。一帧AAC原始数据包括1024个sample，那么AAC音频文件1s内的帧数为：sampleRate / 1024 帧。从而得到一帧AAC的持续时间为: 12perFrameTime (微妙) &#x3D; 1000000L &#x2F; sampleRate &#x2F; 1024 已知每一帧的持续时间的话，那么只需要根据当前帧数，即可计算出当前的时间戳。 以上","path":"2019/05/20/2019-05-20-audio-time/","date":"05-20","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"音视频","slug":"音视频","permalink":"https://ailo.fun/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"}]},{"title":"Camera2挖坑日记---如何解决预览画面变形","text":"原创文章，转载请联系作者 一梦觉来三十载，休休。空为梅花白了头 概述Camera2是目前Android相机开发最新的API，旧版本的Camera已经被废弃了。一般情况下，Camera2的使用是将图像发送到SurfaceView或者TextureView【通过SurfaceTexture】来预览。使用JPEG或者Raw sensor格式的ImageReader来捕获JPEG图像或RAW缓冲区。【注1】今天主要是记录一下， 在使用Camera2API开发Android相机过程中，解决预览画面变形的问题。另，本文所记录的情况，都是竖屏情况的设备。题主参考Google方法给出的Demo，自定义了TextureView，可以自动适配宽高，支持全屏展示。代码地址AutoFitTextureView 效果以下的画面基本上处于同一角度拍摄所得 变形的画面 正常的小画面，以宽为基准计算高度。 正常全屏画面，高度铺满屏幕，画面被拉近。 解决++在解决方案上，主要参考了Google官方给出的Demo。Camera2VideoFragment++。在Camera2的使用上，我使用了TextureView作为预览画面的承载。为什么不使用SurfaceView呢？因为SurfaceView是基于Window层面的View，有很多View的属性都用不了，使用起来比较麻烦。Camera2API会返回一系列可以用于输出到SurfaceTexture的Size集合。 如图：以题主手上的Oppo r15为例，总共会返回13个可以用作输出的size需要注意的是，如果以竖屏为例，这里的宽高是反过来的在得到可用的size集合后，根据实际开发情况选择合适的PreviewSize即可 正常小画面展示选定了一个合适的PreviewSize之后，只需要适配TextureView的宽高即可。小画面以宽为基准，需要根据屏幕宽度来计算相应的高度即可。这一部分的代码，在官方Demo里已经相当详细。其实很简单，就是自电影AutoFitTextureView里的onMeasure函数里，重新设定宽高。 12345678override fun onMeasure(....)&#123; if (width &lt; ((height * ratioWidth) &#x2F; ratioHeight)) &#123; &#x2F;&#x2F; 控件本身的宽小于根据比例计算来得宽，则使用控件本身的宽 setMeasuredDimension(width, (width * ratioHeight) &#x2F; ratioWidth) &#125; else &#123; setMeasuredDimension((height * ratioWidth) &#x2F; ratioHeight, height) &#125;&#125; 其中ratioWidth、ratioHeight即是PreviewSize 全屏展示全屏展示预览画面，则需要使用TextureView的另一个函数——setTransform。这个函数是给Textureview设置一个Transform，用于改变TextureView的画面。By,双指缩放时可以使用这个函数。全屏展示时，TextureView的宽高铺满整个屏幕，相应的我们只需要改变一下Transform即可，此时高度不变，但是要将画面的宽度放大。放大的倍数即为屏幕的高度除以小画面时计算得来的高度比例即可。还是在onMeasure函数内： 1234567891011override fun onmeasure(...)&#123; val w &#x3D; resources.displayMetrics.widthPixels val h &#x3D; resources.displayMetrics.heightPixels setMeasuredDimension(w, h) fullScreenTransform.reset() fullScreenTransform.set(defTransform) &#x2F;&#x2F; 宽拉伸，高不变 fullScreenTransform.postScale(h.toFloat() &#x2F;ratioHeight, 1f, w * 0.5f, h * 0.5f) setTransform(fullScreenTransform)&#125; 其中fullScreenTransform即为TextureView最初始的Transform 自定义TextureView题主将AutoFitTextureView重新封装了一下，对外提供了全屏展示的开关函数。地址在这里AutoFitTextureView，感兴趣的童鞋可以去看一下。以上","path":"2019/05/10/2019-05-10-camera2-1/","date":"05-10","excerpt":"","tags":[],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/camera2_1_bg.jpg"},{"title":"使用MediaCodeC将图片集编码为视频","text":"原创文章，转载请联系作者 绿生莺啼春正浓，钗头青杏小，绿成丛。玉船风动酒鳞红。歌声咽，相见几时重？ MediaLearn 欢迎大家关注我的项目MediaLearn，这是一个以学习分享音视频知识为目的建立的项目，目前仅局限于Android平台，后续会逐渐扩展。对音视频领域知识感兴趣的朋友，欢迎一起来学习！！！ 提要这是MediaCodeC系列的第三章，主题是如何使用MediaCodeC将图片集编码为视频文件。在Android多媒体的处理上，MediaCodeC是一套非常有用的API。此次实验中，所使用的图片集正是MediaCodeC硬解码视频，并将视频帧存储为图片文件文章中，对视频解码出来的图片文件集，总共332张图片帧。若是对MediaCodeC视频解码感兴趣的话，也可以浏览之前的文章：MediaCodeC解码视频指定帧，迅捷、精确 核心流程MediaCodeC的常规工作流程是：拿到可用输入队列，填充数据；拿到可用输出队列，取出数据，如此往复直至结束。在一般情况下，填充和取出两个动作并不是即时的，也就是说并不是压入一帧数据，就能拿出一帧数据。当然，除了编码的视频每一帧都是关键帧的情况下。一般情况下，输入和输出都使用buffer的代码写法如下： 12345678910for (;;) &#123; &#x2F;&#x2F;拿到可用InputBuffer的id int inputBufferId &#x3D; codec.dequeueInputBuffer(timeoutUs); if (inputBufferId &gt;&#x3D; 0) &#123; ByteBuffer inputBuffer &#x3D; codec.getInputBuffer(…); &#x2F;&#x2F; inputBuffer 填充数据 codec.queueInputBuffer(inputBufferId, …); &#125; &#x2F;&#x2F; 查询是否有可用的OutputBuffer int outputBufferId &#x3D; codec.dequeueOutputBuffer(…); 本篇文章的编码核心流程，和以上代码相差不多。只是将输入Buffer替换成了Surface，使用Surface代替InputBuffer来实现数据的填充。 为什么使用Surface在MediaCodeC官方文档里有一段关于Data Type的描述： CodeC接受三种类型的数据，压缩数据（compressed data）、原始音频数据（raw audio data）以及原始视频数据（raw video data）。这三种数据都能被加工为ByteBuffer。但是对于原始视频数据，应该使用Surface去提升CodeC的性能。 在本次项目中，使用的是MediaCodeCcreateInputSurface函数创造出Surface，搭配OpenGL实现Surface数据输入。这里我画了一张简单的工作流程图：整体流程上其实和普通的MediaCodeC工作流程差不多，只不过是将输入源由Buffer换成了Surface。 知识点在代码中，MediaCodeC只负责数据的传输，而生成MP4文件主要靠的类是MediaMuxer。整体上，项目涉及到的主要API有： MediaCodeC，图片编码为帧数据 MediaMuxer，帧数据编码为Mp4文件 OpenGL，负责将图片绘制到Surface 接下来，我将会按照流程工作顺序，详解各个步骤： 流程详解在详解流程前，有一点要注意的是，工作流程中所有环节都必须处在同一线程。 配置首先，启动子线程。配置MediaCodeC： 12345678910111213var codec &#x3D; MediaCodec.createEncoderByType(MediaFormat.MIMETYPE_VIDEO_AVC)&#x2F;&#x2F; mediaFormat配置颜色格式、比特率、帧率、关键帧间隔&#x2F;&#x2F; 颜色格式默认为MediaCodecInfo.CodecCapabilities.COLOR_FormatSurfacevar mediaFomat &#x3D; MediaFormat.createVideoFormat(MediaFormat.MIMETYPE_VIDEO_AVC, size.width, size.height) .apply &#123; setInteger(MediaFormat.KEY_COLOR_FORMAT, colorFormat) setInteger(MediaFormat.KEY_BIT_RATE, bitRate) setInteger(MediaFormat.KEY_FRAME_RATE, frameRate) setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, iFrameInterval) &#125;codec.configure(mediaFormat, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE)var inputSurface &#x3D; codec.createInputSurface()codec.start() 将编码器配置好之后，接下来配置OpenGL的EGL环境以及GPU Program。由于OpenGL涉及到比较多的知识，在这里便不再赘述。视频编码项目中，为方便使用，我将OpenGL环境搭建以及GPU program搭建封装在了GLEncodeCore类中，感兴趣的可以看一下。EGL环境在初始化时，可以选择两种和设备连接的方式，一种是eglCreatePbufferSurface;另一种是eglCreateWindowSurface,创建一个可实际显示的windowSurface，需要传一个Surface参数，毫无疑问选择这个函数。 123456789var encodeCore &#x3D; GLEncodeCore(...)encodeCore.buildEGLSurface(inputSurface)fun buildEGLSurface(surface: Surface) &#123; &#x2F;&#x2F; 构建EGL环境 eglEnv.setUpEnv().buildWindowSurface(surface) &#x2F;&#x2F; GPU program构建 encodeProgram.build()&#125; 图片数据传入，并开始编码在各种API配置好之后，开启一个循环，将File文件读取的Bitmap传入编码。 12345678910val videoEncoder &#x3D; VideoEncoder(640, 480, 1800000, 24)videoEncoder.start(Environment.getExternalStorageDirectory().path + &quot;&#x2F;encodeyazi640$&#123;videoEncoder.bitRate&#125;.mp4&quot;)val file &#x3D; File(图片集文件夹地址)file.listFiles().forEachIndexed &#123; index, it -&gt; BitmapFactory.decodeFile(it.path)?.apply &#123; videoEncoder.drainFrame(this, index) &#125;&#125;videoEncoder.drainEnd() 在提要里面也提到了，编码项目使用的图片集是之前MediaCodeC硬解码视频，并将视频帧存储为图片文件中的视频文件解码出来的，332张图片。循环代码中，我们逐次将图片Bitmap传入drainFrame(...)函数，用于编码。当所有帧编码完成后，使用drainEnd函数通知编码器编码完成。 视频帧编码接着我们再来看drameFrame(...)函数中的具体实现。 12345678910111213141516171819&#x2F;** * * @b : draw bitmap to texture * * @presentTime: frame current time * *&#x2F; fun drainFrame(b: Bitmap, presentTime: Long) &#123; encodeCore.drainFrame(b, presentTime) drainCoder(false) &#125; fun drainFrame(b: Bitmap, index: Int) &#123; drainFrame(b, index * mediaFormat.perFrameTime * 1000) &#125; fun drainCoder(...)&#123; 伪代码：MediaCodeC拿到输出队列数据，使用MediaMuxer编码为 Mp4文件 &#125; 首先使用OpenGL将Bitmap绘制纹理上，将数据传输到Surface上，并且需要将这个Bitmap所代表的时间戳传入。在传入数据后使用drainCoder函数，从MediaCodeC读取输出数据，使用MediaMuxer编码为Mp4视频文件。drainCoder函数具体实现如下： 123456789101112131415161718loopOut@ while (true) &#123; &#x2F;&#x2F; 获取可用的输出缓存队列 val outputBufferId &#x3D; dequeueOutputBuffer(bufferInfo, defTimeOut) Log.d(&quot;handleOutputBuffer&quot;, &quot;output buffer id : $outputBufferId &quot;) if (outputBufferId &#x3D;&#x3D; MediaCodec.INFO_TRY_AGAIN_LATER) &#123; if (needEnd) &#123; &#x2F;&#x2F; 输出无响应 break@loopOut &#125; &#125; else if (outputBufferId &#x3D;&#x3D; MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &#123; &#x2F;&#x2F; 输出数据格式改变，在这里启动mediaMuxer &#125; else if (outputBufferId &gt;&#x3D; 0) &#123; &#x2F;&#x2F; 拿到相应的输出数据 if (bufferInfo.flags and MediaCodec.BUFFER_FLAG_END_OF_STREAM !&#x3D; 0) &#123; break@loopOut &#125; &#125; &#125; 就像之前提到过的，并不是压入一帧数据就能即时得到一帧数据。在使用OpenGL将Bitmap绘制到纹理上，并传到Surface之后。要想得到输出数据，必须在一个无限循环的代码中，去拿MediaCodeC输出数据。也就是在这里的代码中，当输出数据格式改变时，为MediaMuxer加上视频轨，并启动。 12trackIndex &#x3D; mediaMuxer!!.addTrack(codec.outputFormat)mediaMuxer!!.start() 整体上的工作流程就是以上这些代码了，传入一帧数据到Surface–&gt;MediaCodeC循环拿输出数据–&gt; MediaMuxer写入Mp4视频文件。当然，后两步的概念已经相对比较清晰，只有第一步的实现是一个难点，也是当时比较困扰我的一点。接下来我们将会详解，如何将一个Bitmap通过OpenGL把数据传输到Surface上。 Bitmap –&gt; Surface项目中，将Bitmap数据传输到Surface上，主要靠这一段代码： 123456fun drainFrame(b: Bitmap, presentTime: Long) &#123; encodeProgram.renderBitmap(b) &#x2F;&#x2F; 给渲染的这一帧设置一个时间戳 eglEnv.setPresentationTime(presentTime) eglEnv.swapBuffers()&#125; 其中encodeProgram是显卡绘制程序，它内部会生成一个纹理，然后将Bitmap绘制到纹理上。此时这个纹理就代表了这张图片，再将纹理绘制到窗口上。之后，使用EGL的swapBuffer提交当前渲染结果，在提交之前，使用setPresentationTime提交当前帧代表的时间戳。 更加具体的代码实现，都在我的Github项目中。GLEncodeCore以及EncodeProgram GPU Program还有EGL 环境构建 结语此处有项目地址，点击传送","path":"2019/04/01/2019-04-01-MediaCodeC-encoder1/","date":"04-01","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"视频","slug":"视频","permalink":"https://ailo.fun/tags/%E8%A7%86%E9%A2%91/"},{"name":"MediaCodeC","slug":"MediaCodeC","permalink":"https://ailo.fun/tags/MediaCodeC/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://ailo.fun/tags/OpenGL/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/mention.jpg"},{"title":"MediaCodeC解码视频指定帧，迅捷、精确","text":"原创文章，转载请联系作者 若待明朝风雨过，人在天涯！春在天涯 提要最近在整理硬编码MediaCodec相关的学习笔记，以及代码文档，分享出来以供参考。本人水平有限，项目难免有思虑不当之处，若有问题可以提Issues。项目地址传送门此篇文章，主要是分享如何用MediaCodeC解码视频指定时间的一帧，回调Bitmap对象。之前还有一篇MediaCodeC硬解码视频，并将视频帧存储为图片文件，主要内容是将视频完整解码，并存储为JPEG文件，大家感兴趣可以去看一看。 如何使用VideoDecoder2上手简单直接，首先需要创建一个解码器对象： 1val videoDecoder2 &#x3D; VideoDecoder2(dataSource) dataSoure就是视频文件地址 解码器会在对象创建的时候，对视频文件进行分析，得出时长、帧率等信息。有了解码器对象后，在需要解码帧的地方，直接调用函数： 123456videoDecoder2.getFrame(time, &#123; it-&gt; &#x2F;&#x2F;成功回调，it为对应帧Bitmap对象 &#125;, &#123; &#x2F;&#x2F;失败回调 &#125;) time 接受一个Float数值，级别为秒 getFrame函数式一个异步回调，会自动回调到主线程里来。同时这个函数也没有过度调用限制。也就是说——，你可以频繁调用而不用担心出现其他问题。 代码结构、实现过程代码结构VideoDecoder2目前只支持硬编码解码，在某些机型或者版本下，可能会出现兼容问题。后续会继续补上软解码的功能模块。先来看一下VideoDecoder2的代码框架，有哪些类构成，以及这些类起到的作用。在VideoDecoder2中，DecodeFrame承担着核心任务，由它发起这一帧的解码工作。获取了目标帧的YUV数据后；由GLCore来将这一帧转为Bitmap对象，它内部封装了OpenGL环境的搭建，以及配置了Surface供给MediaCodeC使用。FrameCache主要是做着缓存的工作，内部有内存缓存LruCache以及磁盘缓存DiskLruCache，因为缓存的存在，很大程度上提高了二次读取的效率。 工作流程VideoDecoder2的工作流程，是一个线性任务队列串行的方式。其工作流程图如下：具体流程： 1.当执行getFrame函数时，首先从缓存从获取这一帧的图片缓存。 2.如果缓存中没有这一帧的缓存，那么首先判断任务队列中正在执行的任务是否和此时需要的任务重复，如果不重复，则创建一个DecodeFrame任务加入队列。 3.任务队列的任务是在一个特定的子线程内，线性执行。新的任务会被加入队列尾端，而已有任务则会被提高优先级，移到队列中index为1的位置。 4、DecodeFrame获取到这一帧的Bitmap后，会将这一帧缓存为内存缓存，并在会在缓存线程内作磁盘缓存，方便二次读取。 接下来分析一下，实现过程中的几个重要的点。 实现过程 如何定位和目标时间戳相近的采样点 如何使用MediaCodeC获取视频特定时间帧 缓存是如何工作，起到的作用有哪些 定位精确帧精确其实是一个相对而言的概念，MediaExtractor的seekTo函数，有三个可供选择的标记：SEEK_TO_PREVIOUS_SYNC, SEEK_TO_CLOSEST_SYNC, SEEK_TO_NEXT_SYNC，分别是seek指定帧的上一帧，最近帧和下一帧。其实，seekTo并无法每次都准确的跳到指定帧，这个函数只会seek到目标时间的最接近的（CLOSEST）、上一帧（PREVIOUS）和下一帧（NEXT）。因为视频编码的关系，解码器只会从关键帧开始解码，也就是I帧。因为只有I帧才包含完整的信息。而P帧和B帧包含的信息并不完全，只有依靠前后帧的信息才能解码。所以这里的解决办法是：先定位到目标时间的上一帧，然后advance，直到读取的时间和目标时间的差值最小，或者读取的时间和目标时间的差值小于帧间隔。 12345678910111213141516171819202122232425262728293031323334353637383940414243val MediaFormat.fps: Int get() &#x3D; try &#123; getInteger(MediaFormat.KEY_FRAME_RATE) &#125; catch (e: Exception) &#123; 0 &#125;&#x2F;* * * return : 每一帧持续时间，微秒 * *&#x2F; val perFrameTime by lazy &#123; 1000000L &#x2F; mediaFormat.fps &#125;&#x2F;* * * 查找这个时间点对应的最接近的一帧。 * 这一帧的时间点如果和目标时间相差不到 一帧间隔 就算相近 * * maxRange:查找范围 * *&#x2F; fun getValidSampleTime(time: Long, @IntRange(from &#x3D; 2) maxRange: Int &#x3D; 5): Long &#123; checkExtractor.seekTo(time, MediaExtractor.SEEK_TO_PREVIOUS_SYNC) var count &#x3D; 0 var sampleTime &#x3D; checkExtractor.sampleTime while (count &lt; maxRange) &#123; checkExtractor.advance() val s &#x3D; checkExtractor.sampleTime if (s !&#x3D; -1L) &#123; count++ &#x2F;&#x2F; 选取和目标时间差值最小的那个 sampleTime &#x3D; time.minDifferenceValue(sampleTime, s) if (Math.abs(sampleTime - time) &lt;&#x3D; perFrameTime) &#123; &#x2F;&#x2F;如果这个差值在 一帧间隔 内，即为成功 return sampleTime &#125; &#125; else &#123; count &#x3D; maxRange &#125; &#125; return sampleTime &#125; 帧间隔其实就是：1s/帧率 使用MediaCodeC解码指定帧获取到相对精确的采样点（帧）后，接下来就是使用MediaCodeC解码了。首先，使用MediaExtractor的seekTo函数定位到目标采样点。 1mediaExtractor.seekTo(time, MediaExtractor.SEEK_TO_PREVIOUS_SYNC) 然后MediaCodeC将MediaExtractor读取的数据压入输入队列，不断循环，直到拿到想要的目标帧的数据。 123456789101112131415161718192021222324252627282930313233343536373839404142&#x2F;** 持续压入数据，直到拿到目标帧* *&#x2F;private fun handleFrame(time: Long, info: MediaCodec.BufferInfo, emitter: ObservableEmitter&lt;Bitmap&gt;? &#x3D; null) &#123; var outputDone &#x3D; false var inputDone &#x3D; false videoAnalyze.mediaExtractor.seekTo(time, MediaExtractor.SEEK_TO_PREVIOUS_SYNC) while (!outputDone) &#123; if (!inputDone) &#123; decoder.dequeueValidInputBuffer(DEF_TIME_OUT) &#123; inputBufferId, inputBuffer -&gt; val sampleSize &#x3D; videoAnalyze.mediaExtractor.readSampleData(inputBuffer, 0) if (sampleSize &lt; 0) &#123; decoder.queueInputBuffer(inputBufferId, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM) inputDone &#x3D; true &#125; else &#123; &#x2F;&#x2F; 将数据压入到输入队列 val presentationTimeUs &#x3D; videoAnalyze.mediaExtractor.sampleTime Log.d(TAG, &quot;$&#123;if (emitter !&#x3D; null) &quot;main time&quot; else &quot;fuck time&quot;&#125; dequeue time is $presentationTimeUs &quot;) decoder.queueInputBuffer(inputBufferId, 0, sampleSize, presentationTimeUs, 0) videoAnalyze.mediaExtractor.advance() &#125; &#125; decoder.disposeOutput(info, DEF_TIME_OUT, &#123; outputDone &#x3D; true &#125;, &#123; id -&gt; Log.d(TAG, &quot;out time $&#123;info.presentationTimeUs&#125; &quot;) if (decodeCore.updateTexture(info, id, decoder)) &#123; if (info.presentationTimeUs &#x3D;&#x3D; time) &#123; &#x2F;&#x2F; 遇到目标时间帧，才生产Bitmap outputDone &#x3D; true val bitmap &#x3D; decodeCore.generateFrame() frameCache.cacheFrame(time, bitmap) emitter?.onNext(bitmap) &#125; &#125; &#125;) &#125; decoder.flush()&#125; 需要注意的是，解码的时候，并不是压入一帧数据，就能得到一帧输出数据的。常规的做法是，持续不断向输入队列填充帧数据，直到拿到想要的目标帧数据。原因还是因为视频帧的编码，并不是每一帧都是关键帧，有些帧的解码必须依靠前后帧的信息。 缓存 LruCache，内存缓存 DiskLruCache LruCache自不用多说，磁盘缓存使用的是著名的DiskLruCache。缓存在VideoDecoder2中占有很重要的位置，它有效的提高了解码器二次读取的效率，从而不用多次解码以及使用OpenGL绘制。 之前在Oppo R15的测试机型上，进行了一轮解码测试。使用MediaCodeC解码一帧到到的Bitmap，大概需要100~200ms的时间。而使用磁盘缓存的话，读取时间大概在50~60ms徘徊，效率增加了一倍。 在磁盘缓存使用的过程中，有对DiskLruCache进行二次封装，内部使用单线程队列形式。进行磁盘缓存，对外提供了异步和同步两种方式获取缓存。可以直接搭配DiskLruCache使用——DiskCacheAssist.kt 总结到目前为止，视频解码的部分已经完成。上一篇是对视频完整解码并存储为图片文件，MediaCodeC硬解码视频，并将视频帧存储为图片文件，这一篇是解码指定帧。音视频相关的知识体系还很大，会继续学习下去。 结语此处有项目地址，点击传送","path":"2019/02/09/2019-02-09-MediaCodeC-frame/","date":"02-09","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"视频","slug":"视频","permalink":"https://ailo.fun/tags/%E8%A7%86%E9%A2%91/"},{"name":"MediaCodeC","slug":"MediaCodeC","permalink":"https://ailo.fun/tags/MediaCodeC/"}]},{"title":"MediaCodeC硬解码视频，并将视频帧存储为图片文件","text":"原创文章，转载请联系作者 醉拍春衫惜旧香，天将离恨恼疏狂。年年陌上生秋草，日日楼中到夕阳。 目的 MediaCodeC搭配MediaExtractor将视频完整解码 视频帧存储为JPEG文件 使用两种方式达成 硬编码输出数据二次封装为YuvImage，并直接输出为JPEG格式文件 硬编码搭配Surface，用OpenGL封装为RGBA数据格式，再利用Bitmap压缩为图片文件 二者皆可以调整图片输出质量 参考 YUV的处理方式，强推大家观看这篇文章高效率得到YUV格式帧，绝对整的明明白白 OpenGL的处理方式，当然是最出名的BigFlake，硬编码相关的示例代码很是详细 解码效率分析 参考对象为一段约为13.8s，H.264编码，FPS为24，72*1280的MPEG-4的视频文件。鸭鸭戏水视频 此视频的视频帧数为332 略好点的设备解码时间稍短一点。但两种解码方式的效率对比下来，OpenGl渲染耗费的时间比YUV转JPEG多。 另：差一点的设备上，这个差值会被提高，约为一倍多。较好的设备，则小于一倍。 实现过程对整个视频的解析，以及压入MediaCodeC输入队列都是通用步骤。 12345678910111213141516171819202122mediaExtractor.setDataSource(dataSource)&#x2F;&#x2F; 查看是否含有视频轨val trackIndex &#x3D; mediaExtractor.selectVideoTrack()if (trackIndex &lt; 0) &#123; throw RuntimeException(&quot;this data source not video&quot;)&#125;mediaExtractor.selectTrack(trackIndex) fun MediaExtractor.selectVideoTrack(): Int &#123; val numTracks &#x3D; trackCount for (i in 0 until numTracks) &#123; val format &#x3D; getTrackFormat(i) val mime &#x3D; format.getString(MediaFormat.KEY_MIME) if (mime.startsWith(&quot;video&#x2F;&quot;)) &#123; return i &#125; &#125; return -1&#125; 配置MediaCodeC解码器，将解码输出格式设置为COLOR_FormatYUV420Flexible，这种模式几乎所有设备都会支持。使用OpenGL渲染的话，MediaCodeC要配置一个输出Surface。使用YUV方式的话，则不需要配置 12345678910111213141516171819202122232425262728293031323334353637383940414243outputSurface &#x3D; if (isSurface) OutputSurface(mediaFormat.width, mediaFormat.height) else null &#x2F;&#x2F; 指定帧格式COLOR_FormatYUV420Flexible,几乎所有的解码器都支持 if (decoder.codecInfo.getCapabilitiesForType(mediaFormat.mime).isSupportColorFormat(defDecoderColorFormat)) &#123; mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, defDecoderColorFormat) decoder.configure(mediaFormat, outputSurface?.surface, null, 0) &#125; else &#123; throw RuntimeException(&quot;this mobile not support YUV 420 Color Format&quot;) &#125; val startTime &#x3D; System.currentTimeMillis() Log.d(TAG, &quot;start decode frames&quot;) isStart &#x3D; true val bufferInfo &#x3D; MediaCodec.BufferInfo() &#x2F;&#x2F; 是否输入完毕 var inputEnd &#x3D; false &#x2F;&#x2F; 是否输出完毕 var outputEnd &#x3D; false decoder.start() var outputFrameCount &#x3D; 0 while (!outputEnd &amp;&amp; isStart) &#123; if (!inputEnd) &#123; val inputBufferId &#x3D; decoder.dequeueInputBuffer(DEF_TIME_OUT) if (inputBufferId &gt;&#x3D; 0) &#123; &#x2F;&#x2F; 获得一个可写的输入缓存对象 val inputBuffer &#x3D; decoder.getInputBuffer(inputBufferId) &#x2F;&#x2F; 使用MediaExtractor读取数据 val sampleSize &#x3D; videoAnalyze.mediaExtractor.readSampleData(inputBuffer, 0) if (sampleSize &lt; 0) &#123; &#x2F;&#x2F; 2019&#x2F;2&#x2F;8-19:15 没有数据 decoder.queueInputBuffer(inputBufferId, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM) inputEnd &#x3D; true &#125; else &#123; &#x2F;&#x2F; 将数据压入到输入队列 val presentationTimeUs &#x3D; videoAnalyze.mediaExtractor.sampleTime decoder.queueInputBuffer(inputBufferId, 0, sampleSize, presentationTimeUs, 0) videoAnalyze.mediaExtractor.advance() &#125; &#125; &#125; 可以大致画一个流程图如下： YUV通过以上通用的步骤后，接下来就是对MediaCodeC的输出数据作YUV处理了。步骤如下： 1.使用MediaCodeC的getOutputImage (int index)函数，得到一个只读的Image对象，其包含原始视频帧信息。 By：当MediaCodeC配置了输出Surface时，此值返回null 2.将Image得到的数据封装到YuvImage中，再使用YuvImage的compressToJpeg方法压缩为JPEG文件 YuvImage的封装，官方文档有这样一段描述：Currently only ImageFormat.NV21 and ImageFormat.YUY2 are supported。YuvImage只支持NV21或者YUY2格式，所以还可能需要对Image的原始数据作进一步处理，将其转换为NV21的Byte数组 读取Image信息并封装为Byte数组此次演示的机型，反馈的Image格式如下： getFormat = 35getCropRect().width()=720getCropRect().height()=1280 35代表ImageFormat.YUV_420_888格式。Image的getPlanes会返回一个数组，其中0代表Y，1代表U，2代表V。由于是420格式，那么四个Y值共享一对UV分量，比例为4：1。代码如下，参考YUV_420_888编码Image转换为I420和NV21格式byte数组,不过我这里只保留了NV21格式的转换 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475fun Image.getDataByte(): ByteArray &#123; val format &#x3D; format if (!isSupportFormat()) &#123; throw RuntimeException(&quot;image can not support format is $format&quot;) &#125; &#x2F;&#x2F; 指定了图片的有效区域，只有这个Rect内的像素才是有效的 val rect &#x3D; cropRect val width &#x3D; rect.width() val height &#x3D; rect.height() val planes &#x3D; planes val data &#x3D; ByteArray(width * height * ImageFormat.getBitsPerPixel(format) &#x2F; 8) val rowData &#x3D; ByteArray(planes[0].rowStride) var channelOffset &#x3D; 0 var outputStride &#x3D; 1 for (i in 0 until planes.size) &#123; when (i) &#123; 0 -&gt; &#123; channelOffset &#x3D; 0 outputStride &#x3D; 1 &#125; 1 -&gt; &#123; channelOffset &#x3D; width * height + 1 outputStride &#x3D; 2 &#125; 2 -&gt; &#123; channelOffset &#x3D; width * height outputStride &#x3D; 2 &#125; &#125; &#x2F;&#x2F; 此时得到的ByteBuffer的position指向末端 val buffer &#x3D; planes[i].buffer &#x2F;&#x2F; 行跨距 val rowStride &#x3D; planes[i].rowStride &#x2F;&#x2F; 行内颜色值间隔，真实间隔值为此值减一 val pixelStride &#x3D; planes[i].pixelStride val TAG &#x3D; &quot;getDataByte&quot; Log.d(TAG, &quot;planes index is $i&quot;) Log.d(TAG, &quot;pixelStride $pixelStride&quot;) Log.d(TAG, &quot;rowStride $rowStride&quot;) Log.d(TAG, &quot;width $width&quot;) Log.d(TAG, &quot;height $height&quot;) Log.d(TAG, &quot;buffer size &quot; + buffer.remaining()) val shift &#x3D; if (i &#x3D;&#x3D; 0) 0 else 1 val w &#x3D; width.shr(shift) val h &#x3D; height.shr(shift) buffer.position(rowStride * (rect.top.shr(shift)) + pixelStride + (rect.left.shr(shift))) for (row in 0 until h) &#123; var length: Int if (pixelStride &#x3D;&#x3D; 1 &amp;&amp; outputStride &#x3D;&#x3D; 1) &#123; length &#x3D; w &#x2F;&#x2F; 2019&#x2F;2&#x2F;11-23:05 buffer有时候遗留的长度，小于length就会报错 buffer.getNoException(data, channelOffset, length) channelOffset +&#x3D; length &#125; else &#123; length &#x3D; (w - 1) * pixelStride + 1 buffer.getNoException(rowData, 0, length) for (col in 0 until w) &#123; data[channelOffset] &#x3D; rowData[col * pixelStride] channelOffset +&#x3D; outputStride &#125; &#125; if (row &lt; h - 1) &#123; buffer.position(buffer.position() + rowStride - length) &#125; &#125; &#125; return data&#125; 最后封装YuvImage并压缩为文件1234val rect &#x3D; image.cropRect val yuvImage &#x3D; YuvImage(image.getDataByte(), ImageFormat.NV21, rect.width(), rect.height(), null) yuvImage.compressToJpeg(rect, 100, fileOutputStream) fileOutputStream.close() MediaCodeC配置输出Surface，使用OpenGL渲染OpenGL的环境搭建和渲染代码不再赘述，只是强调几个点： 渲染纹理的线程一定要和MediaCodeC配置Surface的线程保持一致 在渲染纹理代码前，一定要调用MediaCodeC的releaseOutputBuffer函数，将输出数据及时渲染到输出Surface上，否则Surface内的纹理将不会收到任何数据 获得可用的RGBA数据，使用Bitmap压缩为指定格式文件123456789101112131415fun saveFrame(fileName: String) &#123; pixelBuf.rewind() GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixelBuf) var bos: BufferedOutputStream? &#x3D; null try &#123; bos &#x3D; BufferedOutputStream(FileOutputStream(fileName)) val bmp &#x3D; Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888) pixelBuf.rewind() bmp.copyPixelsFromBuffer(pixelBuf) bmp.compress(Bitmap.CompressFormat.JPEG, 100, bos) bmp.recycle() &#125; finally &#123; bos?.close() &#125; &#125; 结果分析到目前为止，针对样例视频，YUV解码出来的视频帧亮度会稍低一点，且图片边缘处有细微的失真。OpenGL渲染解码的视频帧会明亮一些，放大三四倍边缘无失真。后续会继续追踪这个问题，会使用FFmpeg解码来作为对比。 结语此处有项目地址，点击传送","path":"2019/01/25/2019-01-25-MediaCodeC-Decode-1/","date":"01-25","excerpt":"","tags":[{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"视频","slug":"视频","permalink":"https://ailo.fun/tags/%E8%A7%86%E9%A2%91/"},{"name":"MediaCodeC","slug":"MediaCodeC","permalink":"https://ailo.fun/tags/MediaCodeC/"}]},{"title":"使用A*算法求解机器人迷宫最短路径","text":"原创文章，转载请联系作者 时光只解催人老，不信多情，长恨离亭，泪滴春衫酒易醒。 前言最近接触了一个挺有意思的小课题，跟大家分享一下。就是利用A*算法，来计算迷宫可行路径。有关这个算法的知识，大家可以看看A星算法维基百科以及A星算法详解来稍作了解。代码地址在此Maze,喜欢Python的小可爱们可以拿去练练手。 提要说明本题中的迷宫，是以宫格类型呈现的，在代码中的呈现为二维数组。其次在迷宫中的移动，也只有上、下、左、右四个动作可选。如下所示： 其中1代表入口，2代表障碍物不可通行，3代表出口 12345[[3, 2, 2, 2, 2, 2, 2, 2, 1], [0, 0, 2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 2, 2, 2, 0, 0, 2], [2, 2, 0, 0, 2, 0, 0, 2, 2], [2, 2, 2, 0, 0, 0, 2, 2, 2]] 其实在A*算法中，对单位搜索区域的描述为–节点nodes。在本题中，我们可以把搜索区域视为正方形，会更简单一点。 A*算法逻辑解析A*算法的逻辑其实并不是很难，简化起来就是两个词：评估、循环。从起点开始行动，首先找到起点周围可以行走的节点，然后在这个节点中，评估出距离终点最优（最短）的节点。那么这个最优节点，将作为下一步行动的点，以此类推，直至找到终点。可以看到，在这个逻辑中，其实最重要的就是评估这一步了。A*算法的评估函数为：f(n) = g(n) + h(n) g(n)–代表移动到这个点的代价，在本题中均为1.因为只可以水平或者数值运动。要是斜角可以移动的话，那么这个值就为√2h(n)–从这个点移动到终点的代价，这是一个猜测值。本题中，将迷宫视作坐标系的话，那么h(n)就是取和终点x、y各自差值的最小者。譬如点[4,2]和终点[1,1]的h(n)取值为：1 代码实现代码中对点的描述，均为实际值，并非以0为开始值计算。 定位起点和终点，使用列表存储四个移动命令，以下代码env_data代表迷宫数组：1234567891011121314# 上下左右四个移动命令，只具备四个移动命令orders &#x3D; [&#39;u&#39;, &#39;d&#39;, &#39;l&#39;, &#39;r&#39;]# 定位起点和终点start_loc &#x3D; []des_loc &#x3D; []for index, value in enumerate(env_data, 1): if len(start_loc) &#x3D;&#x3D; 0 or len(des_loc) !&#x3D; 0: if 1 in value: start_loc &#x3D; (index, value.index(1) + 1) if 3 in value: des_loc &#x3D; (index, value.index(3) + 1) else: break 判断节点所有可执行的移动命令：12345678910111213141516171819202122232425262728def valid_actions(loc): &quot;&quot;&quot; :param loc: :return: 当前位置所有可用的命令 &quot;&quot;&quot; loc_actions &#x3D; [] for order in orders: if is_move_valid(loc, order): loc_actions.append(order) return loc_actionsdef is_move_valid(loc, act): &quot;&quot;&quot; 判断当前点，是否可使用此移动命令 &quot;&quot;&quot; x &#x3D; loc[0] - 1 y &#x3D; loc[1] - 1 if act not in orders: return false else: if act &#x3D;&#x3D; orders[0]: return x !&#x3D; 0 and env_data[x - 1][y] !&#x3D; 2 elif act &#x3D;&#x3D; orders[1]: return x !&#x3D; len(env_data) - 1 and env_data[x + 1][y] !&#x3D; 2 elif act &#x3D;&#x3D; orders[2]: return y !&#x3D; 0 and env_data[x][y - 1] !&#x3D; 2 else: return y !&#x3D; len(env_data[0]) - 1 and env_data[x][y + 1] !&#x3D; 2 拿到节点周围移动单位为1的所有可到达点,不包括此节点：1234567891011121314151617181920212223242526272829303132def get_all_valid_loc(loc): &quot;&quot;&quot; 计算当前点，附近所有可用的点 :param loc: :return: &quot;&quot;&quot; all_valid_data &#x3D; [] cur_acts &#x3D; valid_actions(loc) for act in cur_acts: all_valid_data.append(move_robot(loc, act)) if loc in all_valid_data: all_valid_data.remove(loc) return all_valid_data def move_robot(loc, act): &quot;&quot;&quot; 移动机器人，返回新位置 :param loc: :param act: :return: &quot;&quot;&quot; if is_move_valid(loc, act): if act &#x3D;&#x3D; orders[0]: return loc[0] - 1, loc[1] elif act &#x3D;&#x3D; orders[1]: return loc[0] + 1, loc[1] elif act &#x3D;&#x3D; orders[2]: return loc[0], loc[1] - 1 else: return loc[0], loc[1] + 1 else: return loc h(n)函数体现：1234567def compute_cost(loc): &quot;&quot;&quot; 计算loc到终点消耗的代价 :param loc: :return: &quot;&quot;&quot; return min(abs(loc[0] - des_loc[0]), abs(loc[1] - des_loc[1])) 开始计算使用road_list来保存走过的路径，同时用另一个集合保存失败的节点——即此节点附近无可用节点，死胡同。 1234567891011121314151617181920212223242526# 已经走过的路径list，走过的路road_list &#x3D; [start_loc]# 证实是失败的路径failed_list &#x3D; []# 没有到达终点就一直循环while road_list[len(road_list) - 1] !&#x3D; des_loc: # 当前点 cur_loc &#x3D; road_list[len(road_list) - 1] # 当前点四周所有可用点 valid_loc_data &#x3D; get_all_valid_loc(cur_loc) # 如果可用点里包括已经走过的节点，则移除 for cl in road_list: if cl in valid_loc_data: valid_loc_data.remove(cl) # 如果可用点集合包括失败的节点，则移除 for fl in failed_list: if fl in valid_loc_data: valid_loc_data.remove(fl) # 没有可用点，视作失败，放弃该节点。从走过的路集合中移除掉 if len(valid_loc_data) &#x3D;&#x3D; 0: failed_list.append(road_list.pop()) continue # 用评估函数对可用点集合排序，取末端的值，加入走过的路集合中 valid_loc_data.sort(key&#x3D;compute_cost, reverse&#x3D;True) road_list.append(valid_loc_data.pop()) 看运行结果 结语人生苦短，我用Python。代码地址在此Maze,喜欢Python的小可爱们可以拿去练练手。在研究迷宫的过程中，发现生成迷宫的算法也是很有意思的，等忙完这段时间再去研究研究。嘻~以上","path":"2018/07/29/2018-07-29-AStarmaze/","date":"07-29","excerpt":"","tags":[{"name":"算法","slug":"算法","permalink":"https://ailo.fun/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"使用DSL模式构建Recyclerview适配器","text":"原创文章，转载请联系作者 前言这是Kotlin实践日记的第一章，使用Kotlin构建一个，使用方便、多功能的Recyclerview适配器——AcrobatAdapter。 AcrobatAdapter让开发者专注于Item的配置，包括Item的UI和数据显示，以及单击、双击、长按事件【且不会影响子View的事件传递】。而且不仅仅是单Item Style列表,还是多Item Style列表，AcrobatAdapter的使用都是一样方便简单。 AcrobatAdapter的设计灵感来自于夜叉，我的函数名称也沿用夜叉的函数名，因为itemDSL这个名称是在太贴切了。夜叉这个项目是针对Recyclerview整体来构建，推荐小可爱们去看看。 下面将展示使用文档。 使用文档####普通列表 123456789val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; itemDSL &#123; resId(R.layout.item_test) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;数据Item&quot; + d &#125; &#125; &#125;.setData(数据源)recycler_view.adapter &#x3D; acrobatAdapter 哒哒，以上代码就成功构建了一个列表resId()函数绑定Item的布局IDshowItem函数内，渲染数据，d表示此项Item对应数据，会根据适配器泛型自动转换。pos为Item的position，view是Item的布局View。而且Kotlin支持使用Id代表控件，再也不用写findViewById啦！最后，适配器的setData方法内置了DiffUtils，会对比新旧数据，这样在数据刷新时Recyclerview会有默认动画展示。让交互更加平滑。 如果开发者在项目中，有好几个界面的Item完全一样，那岂不是还要写几套代码？完全不用担心，Item也支持复用。首先Item相关类，继承AcrobatItem。 123456class Test : AcrobatItem&lt;Int&gt;() &#123; override fun showItem(d: Int, pos: Int, view: View) &#123; view.item_tv.text &#x3D; &quot;共用Item&quot; + d &#125; override fun getResId(): Int &#x3D; R.layout.item_test&#125; 在适配器中： 123456val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; item &#123; Test() &#125; &#125;.setData(数据源) recycler_view.adapter &#x3D; acrobatAdapter 让你的Item继承AcrobatItem即可。这样再多的界面复用Item也完全可行，但要注意的一点是：Item的数据类型必须一致。 多Item样式可以咩？当然可以啦！多item样式的话，写多个ItemDSL即可！每一个ItemDSL就代表一种独有的Item样式。同理，每调用一次item，也就多一种Item样式。 1234567891011121314151617val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; itemDSL &#123; resId(R.layout.item_test) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;数据Item: &quot; + d &#125; isMeetData &#123; d, pos -&gt; pos &#x3D;&#x3D; 1 &#125; &#125; itemDSL &#123; resId(R.layout.item_test1) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;cece: &quot; + d &#125; isMeetData &#123; d, pos -&gt; pos !&#x3D; 1 &#125; &#125; &#125;.setData(数据源) recycler_view.adapter &#x3D; acrobatAdapter isMeetData函数两个参数为数据和position。用这两个参数来判断此Item在哪个位置、什么条件展示。譬如示例代码，position为1时是一个样式，不为1时是另一种样式。但要注意，所有的Item的isMeetData的条件都是互斥的噢。否则会抛出异常。 嗯……Recyclerview没有默认的Item点击事件怎么办？没问题，AcrobatAdapter替你搞定。每个Item不但有单击click,还附带了双击DoubleTap和长按LongPress事件。而且完全不会影响Item布局View内部childView的事件。 每种Item都可以绑定自己独有的三个事件 1234567891011121314151617181920212223242526272829303132333435363738val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; itemDSL &#123; resId(R.layout.item_test) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;数据Item: &quot; + d &#125; onClick &#123; toastS(&quot;单击&quot;) &#125; onDoubleTap &#123; toastS(&quot;双击&quot;) &#125; longPress &#123; toastS(&quot;长按&quot;) &#125; &#125; itemDSL &#123; resId(R.layout.item_test1) showItem &#123; d, pos, view -&gt; view.item_tv1.text &#x3D; &quot;另一种样式&quot; + d &#125; isMeetData &#123; d, pos -&gt; pos &#x3D;&#x3D; 1 &#125; onClick &#123; toastS(&quot;单击另一种Item&quot;) &#125; onDoubleTap &#123; toastS(&quot;双击另一种Item&quot;) &#125; longPress &#123; toastS(&quot;长按另一种Item&quot;) &#125; &#125; &#125;.setData(数据源) 三个事件都是单独绑定Item的样式的！当使用多Item样式列表时，再也不用在click事件中，写很多的条件判断了！ AcrobatAdapter不但支持Item绑定事件，也支持Adapter外部绑定事件。但这样就需要开发者，在外部事件里区分多Item样式了。 适配器持有Item事件，使用AcrobarAdapter的bindEvent()函数 123456789101112131415161718192021val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; itemDSL &#123; resId(R.layout.item_test) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;数据Item: &quot; + d &#125; isMeetData &#123; d, pos -&gt; pos !&#x3D; 1 &#125; &#125; &#125;.setData(data).bindEvent &#123; onClick &#123; toastS(&quot;外部单击&quot;) &#125; onDoubleTap &#123; toastS(&quot;外部双击&quot;) &#125; longPress &#123; toastS(&quot;外部长按&quot;) &#125; &#125; 还有几个使用的小Tip ItemDSl的onViewCreated(parent,view)函数 12345678910111213val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; itemDSL &#123; resId(R.layout.item_test) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;数据Item: &quot; + d &#125; onViewCreate &#123; parent, view -&gt; 作一些和数据无关的UI操作，譬如view设置为圆形 或者EditText的addTextChangedListener &#125; &#125; &#125; showItem()函数是绑定在适配器的onBingViewHolder函数里的，触发会比较频繁。如果在showItem内做一些UI操作，会比较浪费性能.onViewCreated函数是绑定在适配器的onCreateViewHolder函数内 刷新单个Item布局 Recyclerview如果需要刷新Item的话，不建议使用notifyItemChanged(int position)方法，因为这个方法会刷新整个Item的视图。在视觉上的直观体现就是，Item会闪烁。所以建议使用如下方法刷新Item： 1notifyItemChanged(int position, Object payload) 使用上面这个方法，不会重绘整个View的视图。 12345678910111213val acrobatAdapter &#x3D; AcrobatAdapter&lt;Int&gt; &#123; itemDSL &#123; resId(R.layout.item_test) showItem &#123; d, pos, view -&gt; view.item_tv.text &#x3D; &quot;数据Item: &quot; + d &#125; showItemPayload &#123; d, pos, view, payloads -&gt; 刷新Item的某个特定的ChildView。 譬如在某个Item刷新进度条。下面为伪代码 view.progreess_bar.setProgress(100%) &#125; &#125; &#125; 下面简单做一下效果展示： #####使用notifyItemChanged(int position)和showItem刷新布局 #####使用notifyItemChanged(int position, Object payload)和showItemPayload刷新布局 效果对比，一目了然。 结语Kotlin已成为Android开发的官方语言，不管工作上用得到用不到，大家了解一二还是有必要的。毕竟这个时代变化的太快了。以上","path":"2018/07/05/2018-07-05-kotlin-adapter/","date":"07-05","excerpt":"","tags":[{"name":"技术讨论","slug":"技术讨论","permalink":"https://ailo.fun/tags/%E6%8A%80%E6%9C%AF%E8%AE%A8%E8%AE%BA/"}]},{"title":"提供一个Glide灵活加载圆角图片的方法","text":"原创文章，转载请联系作者 前言Glide是目前使用的颇为广泛的图片加载框架，同时也是Google官方推荐使用的。在图片处理方面，它提供了很多不错的功能。 如何才能灵活圆角图片显示，大概是很多APP都会出现的UI设计了，Glide本身也提供了圆角图片的加载方式——但也只是简单的四圆角。实际项目开发中，并不能应付多变的产品需求和善变的UI设计师了。譬如有时候，只需要顶部展示圆角，有时候又只需要左侧展示圆角等等。那么，本次的方法适用于使用了Glide作为项目图片框架的小可爱们，开发者可以对四个圆角进行单独设置，不仅仅是显示隐藏，每个圆角的半径亦是独立存在的。 使用文档Glide有对外暴露一个方法，可以在图片显示前，对图片作转换处理——就是Transformations。有关此方面的文字，小可爱们可以看看这篇——Glide - 自定义转换。本文的RoundCorner就是继承了BitmapTransformation类来实现的。它对外提供两个构造函数，一个构造函数有四个参数，分别是leftTop:左上角、rightTop:右上角、leftBottom:左下角、rightBottom：右下角。可以供外部，灵活的去选择设置哪几个圆角需要去展示，四个圆角的半径大小。另一个函数，只提供一个参数就是同时设置四个圆角，当然这是用于四个圆角同时展示且半径相同的情况下。于此同时，构造函数中只需要传数值即可，类内部已经做了dp处理。下面做一下简单的展示。 加载普通圆角图片 123Glide.with(this).load(&quot;http:&#x2F;&#x2F;p15.qhimg.com&#x2F;bdm&#x2F;720_444_0&#x2F;t01b12dfd7f42342197.jpg&quot;) .apply(RequestOptions.bitmapTransform(RoundCorner(20f))) .into(img) 只是顶部圆角 123Glide.with(this).load(&quot;http:&#x2F;&#x2F;p15.qhimg.com&#x2F;bdm&#x2F;720_444_0&#x2F;t01b12dfd7f42342197.jpg&quot;) .apply(RequestOptions.bitmapTransform(RoundCorner(leftTop &#x3D; 20f, rightTop &#x3D; 20f))) .into(img) 只是左侧圆角 123Glide.with(this).load(&quot;http:&#x2F;&#x2F;p15.qhimg.com&#x2F;bdm&#x2F;720_444_0&#x2F;t01b12dfd7f42342197.jpg&quot;) .apply(RequestOptions.bitmapTransform(RoundCorner(leftTop &#x3D; 20f, leftBottom &#x3D; 20f))) .into(img) 以上就是一次简单的展示了，如果你想更加灵活的加载圆角图片,选择这个方法没有错。代码在这里，传送门——RoundCorner 结语以上","path":"2018/07/01/2018-07-01-glide-round/","date":"07-01","excerpt":"","tags":[{"name":"技术讨论","slug":"技术讨论","permalink":"https://ailo.fun/tags/%E6%8A%80%E6%9C%AF%E8%AE%A8%E8%AE%BA/"}]},{"title":"提供一种Fragment可见性改变的监测方案","text":"原创文章，转载请联系作者 前言Fragment，这个让人又爱又恨“碎片”。使用它可以让项目更加轻便–我们可以将功能分割、复用，但其复杂的生命周期和Transaction事务，在极端操作【某些测试人员有一手绝活，三指甚至六指同时触屏乱弹】下会出现一些不可预期的错误–Fragment嵌套Fragment,横竖屏切换等等。但无论怎样，面对解决问题，才是关键。这篇文章就是针对Fragment监测可见状态改变，提供一种解决方案。 Fragment可见性解析首先，要说明一下，这里的可见性就是对用户来说看的见。不仅仅是界面位于顶层那种常规情况，而是即便界面上还存在一层透明界面或是对话框，那么依然判定其对用户可见，为visible。接下来会分析在特定交互环境下，Fragment内部被触发的方法。 onResumeFragment是不能单独存在的，它所在的视图树中，往下追溯，根部一定是一个Activity。在源码中，onResume()方法的描述很有意思。 12345678910&#x2F;** * Called when the fragment is visible to the user and actively running. * This is generally * tied to &#123;@link Activity#onResume() Activity.onResume&#125; of the containing * Activity&#39;s lifecycle. *&#x2F; @CallSuper public void onResume() &#123; mCalled &#x3D; true; &#125; 一般情况下，对用户可见时触发。绑定在依赖的Activity生命周期里 也就是说，一般这个方法，会在可见并且正在活跃时被调用。但说到底，还是个“窝里造”，生命周期完全依赖于父容器—-也一定依赖于根Activity。那么不一般的情况下呢？有这么一个例子，在进入一个Activity界面时，直接调用了beginTransaction().hide(Fragment)方法。那么用户一开始就不会看到这个界面，但生命周期确实也走到了onResume。由此可知，可见性的判断不能只依赖于这一个方法的判断。 onHiddenChanged这个方法在使用beginTransaction().hide(Fragment)会被调用，而且是在onResume之前。先来看看源码里的描述。 1234&#x2F;* @param hidden True if the fragment is now hidden, false otherwise. *&#x2F; public void onHiddenChanged(boolean hidden) &#123; &#125; 这个方法会回调出来一个参数，true的时候表示隐藏了，false表示可见。在可见性改变时被调用。这里要注意一下这个布尔值的定义！ setUserVisibleHintViewPager搭配Fragment，也是常见的交互模式了。此时左右滑动时，这个方法会被触发。但有一点要说明一下，当ViewPager初始化时，Fragment相应的生命周期里。setUserVisibleHint方法是走在Fragment的onCreate之前的。 以上几个方法，就是常见的交互下，会被触发的方法了。可见性的监测，主要也依赖于这个方法的相互配合。这里还需要说明一下，可见性的监测，监测的是“改变”。也就是当Fragment被创建出来时，不会触发监测方法，不管它是可见还是不可见的状态。 代码实现在BaseFragment内，提供了一个onVisibleToUserChanged(boolean isVisibleToUser)方法作为内部回调。参数isVisibleToUser如字面所示，True表示可见，false不可见。当你需要在界面不可见，取消网络请求或是释放一些东西，你就可以使用此方案。代码实现相当简单，就是一连串逻辑代码而已。只是在onResume方法里，需要判断一下是否已经触发了onHiddenChanged或是setuserVisibleHint方法。代码很短，不到100行。这里直接贴出来。不方便的小可爱们，可以直接去GitHub地址.如果你喜欢的话，不妨点个赞吧。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162abstract class BaseFragment : Fragment()&#123; lateinit var mRootView: View private var isVisibleToUsers &#x3D; false private var isOnCreateView &#x3D; false private var isSetUserVisibleHint &#x3D; false private var isHiddenChanged &#x3D; false private var isFirstResume &#x3D; false override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? &#123; isOnCreateView &#x3D; true mRootView &#x3D; LayoutInflater.from(activity).inflate(getResId(), null, false) return mRootView &#125; abstract fun getResId(): Int override fun onResume() &#123; super.onResume() if (!isHiddenChanged &amp;&amp; !isSetUserVisibleHint) &#123; if (isFirstResume) &#123; setVisibleToUser(true) &#125; &#125; if (isSetUserVisibleHint || (!isFirstResume &amp;&amp; !isHiddenChanged)) &#123; isVisibleToUsers &#x3D; true &#125; isFirstResume &#x3D; true &#125; override fun onPause() &#123; super.onPause() isHiddenChanged &#x3D; false isSetUserVisibleHint &#x3D; false setVisibleToUser(false) &#125; override fun setUserVisibleHint(isVisibleToUser: Boolean) &#123; super.setUserVisibleHint(isVisibleToUser) isSetUserVisibleHint &#x3D; true setVisibleToUser(isVisibleToUser) &#125; override fun onHiddenChanged(hidden: Boolean) &#123; super.onHiddenChanged(hidden) isHiddenChanged &#x3D; true setVisibleToUser(!hidden) &#125; private fun setVisibleToUser(isVisibleToUser: Boolean) &#123; if (!isOnCreateView) &#123; return &#125; if (isVisibleToUser &#x3D;&#x3D; isVisibleToUsers) &#123; return &#125; isVisibleToUsers &#x3D; isVisibleToUser onVisibleToUserChanged(isVisibleToUsers) &#125; protected open fun onVisibleToUserChanged(isVisibleToUser: Boolean) &#123; &#125;&#125; 结语以上","path":"2018/06/21/2018-06-21-fragment-v/","date":"06-21","excerpt":"","tags":[{"name":"技术讨论","slug":"技术讨论","permalink":"https://ailo.fun/tags/%E6%8A%80%E6%9C%AF%E8%AE%A8%E8%AE%BA/"}]},{"title":"仿FlipBoard直板翻页效果","text":"原创文章，转载请联系作者 梧桐落，又还秋色，又还寂寞。 效果图,文件比较大，稍稍等一下 (●ﾟωﾟ●)： 前言首先，首先！Demo只是对FliBoard的立体感直板翻页式交互效果作了模仿，只是效果只是效果。那种翻页组件挺麻烦的，以后可能会抽时间做一下(￣▽￣)”立体感是一种模仿，在二维平面上，合理地利用光影、透视（远小近大）等方式，塑造一种近似现实三维世界的感jio。为什么会产生立体感? 是因为人的视网膜接受到的，全是三维世界的投影。是你的大脑以及经验，脑补出了三维世界。举栗子，下面这张图片，你会把它看作一个弯曲三角吗同理，动画也无非是利用了人眼的视觉暂留而已。某种程度，它和魔术拥有相同的本质————欺骗。 效果解析 解析效果前，先提一下会用到的知识点 1、用到的知识点 graphics.Camera，图形包下用来处理3D旋转的类 canvas、Matrix 2、效果拆解直板式的翻页，效果其实并不复杂。手机屏幕之后，是一个三维坐标系。想象一下有张板子(Bitmap)放在XY坐标系，要达到翻页效果，让其绕着X轴旋转即可。正常情况下，板子（Bitmap）是作为整体旋转。我们将板子中心点移到X轴上，那么绕着Z轴旋转时，上下两部分运动的方向肯定是相反的。就像这样： 上图为绕着X轴旋转45度，缩放0.5f效果 如上图所示，为达到效果，必须将上下两部分分开绘制。你可以采用将Bitmap分割的方式，也可以分割Canvas。Demo里，我采取的是分割Canvas。使用方法canvas.clipRect(left, top, right, bottom)。 3、手势拆解翻页共有三种状态，静态、下翻以及上翻。静态不必赘述，下面会分析一下上翻和下翻绘制。 3.1 向下翻页绘制解析向下翻页，就是翻过当前页回到上一页。在效果拆解那部分，我们已经知道，45度时，上半部分会偏向屏幕后。所以要让上半部分向下翻转。旋转角度得是负数。也就是，在一个完整的下翻周期内，角度的变化为0到-180度。其中0到-90度内，当前页正在下翻，页面变动在上半区域，此时可以看到的界面有：下翻ing的当前页上半部分、当前页产生的阴影、上一页的上半部分（保持不动）。而在-90到-180度阶段，此时下翻的动作接近完成，页面变动在下半区域，此时可以看到的界面有：即将翻过的上一页的下半部分、上一页翻转产生的阴影、当前页的下半部分。 3.2 向上翻页绘制解析向上翻页，就是翻过当前页去下一页。和下翻逻辑相反，这是一个0到180度的周期活动。0到90度为正在上翻，页面变动在下半区域。而90到180度，上翻动作接近完成，页面变动在上班区域，很快会看到完整的下一页。 具体实现 用自定义View来实现，这里只贴出主要代码，部分逻辑会用伪代码表述，完整代码文末提供。 1、绘制因为只是仿写效果，所以全部逻辑放在了一个自定义View内部。先看一些主要的成员变量。 1234567891011121314151617181920212223242526272829303132 &#x2F;&#x2F;向下翻旋转角度,0~-180f private var rotateF &#x2F;&#x2F;向上翻旋转角度,0~180f private var rotateS &#x2F;&#x2F;翻动状态，0为松手，1为向下翻，-1为向上翻 private var statusFlip &#x3D; 0 &#x2F;&#x2F;当前页 private var curPage&#x2F;&#x2F;用于3D旋转的Camera类 private val camera&#x2F;&#x2F;绘制Bitmap的Matrix private val drawMatrix&#x2F;&#x2F;中心点X坐标 private val centerX&#x2F;&#x2F;中心点Y坐标 private val centerY &#x2F;&#x2F;当前Bitmap private var curBitmap: Bitmap &#x2F;&#x2F;上一张Bitmap private var lastBitmap: Bitmap &#x2F;&#x2F;下一张Bitmap private var nextBitmap: Bitmap 我维护了两个变量用来分别控制下翻和上翻的角度变化。与此同时，也分了两个方法，来分别绘制上半部分和下半部分。 123456789101112131415161718&#x2F;&#x2F;上半部分绘制fun drawFirstHalf(canvas: Canvas?, bitmap: Bitmap?, rotate: Float) &#123; canvas?.save() &#x2F;&#x2F;将canvas上半部分切割 canvas?.clipRect(0, 0, width, height &#x2F; 2) camera.save() &#x2F;&#x2F;camera绕着X轴旋转 camera.rotateX(角度变化小于-90度，不再处理) camera.getMatrix(drawMatrix) camera.restore() &#x2F;&#x2F;随着旋转角度变化的缩放值，只缩放Y轴 drawMatrix.preScale(1.0f, 缩放比) &#x2F;&#x2F;将图片移到中心点 drawMatrix.preTranslate(-centerX, -centerY) drawMatrix.postTranslate(centerX, centerY) canvas?.drawBitmap(this, drawMatrix, null) canvas?.restore() &#125; 1234567891011121314fun drawSecondHalf(canvas: Canvas?, bitmap: Bitmap?, rotate: Float) &#123; canvas?.save() camera.save() &#x2F;&#x2F;切割下半部分canvas canvas?.clipRect(0, height &#x2F; 2, width, height) camera.rotateX(绕着X轴旋转角度，大于90度后只不再处理变化) camera.getMatrix(drawMatrix) camera.restore() drawMatrix.preScale(1.0f, 缩放比随着角度变化) drawMatrix.preTranslate(-centerX, -centerY) drawMatrix.postTranslate(centerX, centerY) canvas?.drawBitmap(this, drawMatrix, null) canvas?.restore() &#125; 2、 手势处理手势处理较为简单，只需要在MOVE的时候，判断此时的状态是上翻还是下翻。然后在抬手UP的时候，根据此时的距离，来判断是否下翻成功或是上翻成功。倘若距离不够标准阈值，那么一切归于原位。 其中startX、startY为手指落点 123456789101112131415161718192021222324252627MotionEvent.ACTION_MOVE -&gt; &#123; val x &#x3D; this.x val y &#x3D; this.y &#x2F;&#x2F;当y运动距离大于x的1.5倍时，才判断为垂直翻动 val disY &#x3D; y - startY if (Math.abs(disY) &gt; 1f &amp;&amp; Math.abs(disY) &gt;&#x3D; Math.abs(x - startX) * 1.5f) &#123; if (statusFlip &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F;滑动间距为正并且不是第一页判断为向下翻，滑动间距为负并且不是最后一页判断为向上翻 statusFlip &#x3D; if (disY &gt; 0 &amp;&amp; curPage !&#x3D; 0) DOWN_FLIP else if (disY &lt; 0 &amp;&amp; curPage !&#x3D; girls.lastIndex) UP_FLIP else 0 &#125; val ratio &#x3D; Math.abs(disY) &#x2F; centerY if (statusFlip &#x3D;&#x3D; DOWN_FLIP) &#123; &#x2F;&#x2F;向下翻并且当前页不等于0 rotateF &#x3D; ratio * -180f Log.d(&quot;cece&quot;, &quot;: rotateF : &quot; + rotateF); invalidate() &#125; else if (statusFlip &#x3D;&#x3D; UP_FLIP) &#123; &#x2F;&#x2F;向上翻，并且不是最后一页 if (curPage !&#x3D; girls.lastIndex) &#123; rotateS &#x3D; ratio * 180f Log.d(&quot;cece&quot;, &quot;: rotateS : &quot; + rotateS); invalidate() &#125; &#125; &#125; &#125; 当手指抬起时，首先判断此时的状态，然后再判断移动过的距离是否满足阈值。不满足的回归当前页，满足阈值的，继续执行未完成的状态。 1234567891011121314151617181920212223242526272829if (statusFlip !&#x3D; 0) &#123; drawMatrix.reset() &#x2F;&#x2F;放手的时候，有动画发生 if (Math.abs(event.y - startY) &lt;&#x3D; centerY &#x2F; 2) &#123; &#x2F;&#x2F;滑动距离小于1&#x2F;4屏幕高，判定仍停留在当前页 rotateF &#x3D; 0f rotateS &#x3D; 0f statusFlip &#x3D; 0 invalidate() &#125; else &#123; &#x2F;&#x2F;滑动距离超过临界值，判定为跳过当前页 if (statusFlip &#x3D;&#x3D; DOWN_FLIP) &#123; &#x2F;&#x2F;自动执行完下翻到上一页的动作 for (i in rotateF.toInt() downTo -180 step 6) &#123; invalidate() &#125; curPage-- &#125; else &#123; &#x2F;&#x2F;自动执行完上翻到下一页的动作 for (i in rotateS.toInt() until 180 step 6) &#123; invalidate() &#125; curPage++ &#125; rotateF &#x3D; 0f rotateS &#x3D; 0f statusFlip &#x3D; 0 &#125; &#125; 当距离达到阈值时，就需要代码来继续完成下翻或者上翻的逻辑。这里我使用循环的方式。譬如上翻超过90度了，就循环到180度，继续完成上翻的动作。 3、 阴影部分和绘制顺序在onDraw(...)方法内绘制时，一定要注意代码顺序。因为在这个方法内，顺序代表着层次。譬如阴影绘制一定要写在页面绘制之前。阴影部分的绘制也分为上下两部分。 1234567fun drawFirstShadow(canvas: Canvas?, rotate: Float) &#123; canvas切割上半部分，绘制color即可 &#125;fun drawSecondShadow(canvas: Canvas?, rotate: Float) &#123; canvas切割下半部分，绘制color即可 &#125; 在onDraw(...)方法内的绘制顺序一定要分明 12345678910111213141516171819202122232425262728293031&#x2F;&#x2F;绘制当前页底下的一层,翻页进行中 if (statusFlip &#x3D;&#x3D; DOWN_FLIP) &#123; &#x2F;&#x2F;向下翻，滑到上一页 drawFirstHalf(canvas, lastBitmap, 0f) drawFirstShadow(canvas, rotateF) &#125; else if (statusFlip &#x3D;&#x3D; UP_FLIP) &#123; drawSecondHalf(canvas, nextBitmap, 0f) drawSecondShadow(canvas, rotateS) &#125; &#x2F;&#x2F;绘制当前页 drawFirstHalf(canvas, curBitmap, rotateF) drawSecondHalf(canvas, curBitmap, rotateS) &#x2F;&#x2F;绘制当前页之上的一层，翻页完成后 if (statusFlip &#x3D;&#x3D; DOWN_FLIP) &#123; if (rotateF &lt;&#x3D; -90f) &#123; &#x2F;&#x2F;先绘制阴影 drawSecondShadow(canvas, rotateF + 180f) drawSecondHalf(canvas, lastBitmap, rotateF + 180f) &#125; &#x2F;&#x2F;绘制覆盖在翻页Bitmap之上淡淡透明层，透明度固定 drawFirstColor(canvas, 20) &#125; else if (statusFlip &#x3D;&#x3D; UP_FLIP) &#123; if (rotateS &gt;&#x3D; 90f) &#123; drawFirstShadow(canvas, rotateS - 180f) drawFirstHalf(canvas, nextBitmap, rotateS - 180f) &#125; &#x2F;&#x2F;淡淡透明度的阴影层 drawSecondColor(canvas, 20) &#125; 还是得区分一下状态，当下翻时，我们得先绘制上一页的上半部分，而且是静态的。然后再绘制当前页下翻产生的阴影。再绘制当前页，然后在当前页顶上再绘制一层固定淡淡透明度的阴影层，让页面层次更加明显。 4、效果修正到这里主要的逻辑业已完成，但我注意到还是有一些小瑕疵。就是旋转角度和缩放比，变化不明显。通常要角度变化到超过45度，才会有很明显的缩放效果展现出来。最开始我以为是缩放比的算法问题，后来才发现是camera的机位问题，camera默认的拍摄角度是[0,0,-8]，当距离屏幕很近时，变化自然不是很明显。当然，camera提供了设置机位的方法setLocation(x, y, z)。最后我调整到[0,0,-20]才满意这个效果。 下图，我给出了，默认机位和[0，0，-20]机位的效果区别。 结语Demo里的实现方式并非是唯一，分享出来是为了提供一种思路。路有很多条，选择即是正确。以上项目代码在此，大家要是喜欢的话不妨点个赞吧","path":"2018/06/10/2018-06-10-flip/","date":"06-10","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"},{"name":"交互体验","slug":"交互体验","permalink":"https://ailo.fun/tags/%E4%BA%A4%E4%BA%92%E4%BD%93%E9%AA%8C/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20180610-blog-header-bg.png"},{"title":"基于Java代码实现的喷漆笔刷","text":"原创文章，转载请联系作者 软草平莎过雨新，轻沙走马路无尘。何时收拾耦耕身？ 先上效果图： 笔刷项目地址在此，大家要是喜欢的话，不妨来点个赞吧 效果解析因为最终要实现的是windwos下的画板喷漆笔刷，所以首先要对它做一个较为详细的效果解析。考虑到笔一般情况下笔刷的使用点，故此会分析一下点和线的效果细节。 画点 从左至右依次是对同一坐标点击2次，点击8次，点击16次的效果展示；当数量趋向更大时，点的密集程度并没有很明显的偏向，基本可以确定要在圆内均匀分布 画线 如图为匀速且缓慢滑过时，由点构成线 具体实现项目的大致框架由View、BasePen，两个大的模块构成。其中View属于UI层面，BasePen属于业务逻辑层面。接下来，将一一介绍这两个模块的具体功用和细节。 View此项目的承载View为PenView，不承担业务逻辑，就是起到一个容器的作用。在PenView中唯一的作用就是触发invalidate（）方法。 1234567891011121314151617181920212223242526272829303132private BasePen mBasePen;@Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); if (w !&#x3D; 0 &amp;&amp; h !&#x3D; 0) &#123; if (mBasePen &#x3D;&#x3D; null) &#123; mBasePen &#x3D; new SprayPen(w, h); &#125; &#125; &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; MotionEvent event1 &#x3D; MotionEvent.obtain(event); mBasePen.onTouchEvent(event1); switch (event.getActionMasked()) &#123; case MotionEvent.ACTION_DOWN: case MotionEvent.ACTION_MOVE: invalidate(); break; case MotionEvent.ACTION_UP: break; &#125; return true; &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); mBasePen.onDraw(canvas); &#125; 具体的业务逻辑，绘制、数据计算、触摸点移动Move等，全都由BasePen以及它的子类来实现了。低耦合性，代表着更多的自由度，对现有项目代码（如果应用到项目中）的冲击更小。在性能方面，如果View满足不了要求，可以用更小的代价将其移植到性能更好的SurfaceView里去。 业务逻辑业务方面，BasePen作为基类，承担了一些基础的数据计算、绘制等功能，而具体的画笔效果则交由子类实现。先看看BasePen里做了什么： 绘制 1234567private List&lt;Point&gt; mPoints;public void onDraw(Canvas canvas) &#123; if (mPoints !&#x3D; null &amp;&amp; !mPoints.isEmpty()) &#123; canvas.drawBitmap(mBitmap, 0, 0, null); drawDetail(canvas); &#125; &#125; 先将笔刷绘制到一张Bitmap之上，再将这张Bitmap交给PenView来绘制出来。Point是一个只记录了x和y坐标的类。drawDetail(Canvas canvas)是一个抽象类，由子类实现具体的绘制。 滑动轨迹在BasePen的onTouchEvent(MotionEvent event1)方法里。以每次DOWN事件为开始，记录MOVE内的所有坐标信息。考虑到喷漆效果基本不用处理笔锋效果，暂不考虑记录UP信息（后续如果实现其他笔刷效果会优化这里）。 12345678910111213141516171819202122232425262728public void onTouchEvent(MotionEvent event1) &#123; switch (event1.getActionMasked()) &#123; case MotionEvent.ACTION_DOWN: clearPoints(); handlePoints(event1); break; case MotionEvent.ACTION_MOVE: handlePoints(event1); break; case MotionEvent.ACTION_UP: break; &#125; &#125; private void handlePoints(MotionEvent event1) &#123; float x &#x3D; event1.getX(); float y &#x3D; event1.getY(); if (x &gt; 0 &amp;&amp; y &gt; 0) &#123; mPoints.add(new Point(x, y)); &#125; &#125; private void clearPoints() &#123; if (mPoints &#x3D;&#x3D; null) &#123; return; &#125; mPoints.clear(); &#125; 喷漆实现123456789101112131415protected void drawDetail(Canvas canvas) &#123; if (getPoints().isEmpty()) &#123; return; &#125; mTotalNum &#x3D; 由自定义粒子密度以及画笔宽度计算而来 drawSpray(当前最新坐标点.x, 当前最新坐标点.y, mTotalNum); &#125; private void drawSpray(float x, float y, int totalNum) &#123; for (int i &#x3D; 0; i &lt; totalNum; i++) &#123; &#x2F;&#x2F;算法计算出圆内随机点 float[] randomPoint &#x3D; getRandomPoint(x, y, mPenW, true); mCanvas.drawCircle(randomPoint[0], randomPoint[1], mCricleR, mPaint); &#125; &#125; 以上是一部分伪代码，SprayPen内部定义了一个喷漆粒子密度，会根据画笔的宽度来实时改变粒子数量。每个粒子的半径则由外部依赖的组件提供的width计算而来。在drawDetail(...)方法内，每一次MOVE和DOWN事件都会在相应坐标处，绘制一定数目的圆内随机点。当其串联起来时，就形成了喷漆效果。当然这只是初步完成，还有一些算法需要完善。伪代码表述不全，可参考SprayPen，在代码中有比较完善的注释。 接下来会说一些有关喷漆算法方面的问题。 喷漆算法的几个问题在实现功能的过程中，有两个问题是值得记录的。一是圆内均匀随机点的分布问题；二是滑动速度快时，笔画的连接处理问题。 如何均匀的在圆内生成随机点为了解决这个问题，主要尝试了三种方法： x在(-R,R)范围内随机取值，由圆解析式求解得y。然后对y在(-y,y)内随机取值，得到的点即为圆内点。同理，也可由y计算出x。java代码如下： 12345float x &#x3D; mRandom.nextInt(r);float y &#x3D; (float) Math.sqrt(Math.pow(r, 2) - Math.pow(x, 2));y &#x3D; mRandom.nextInt((int) y);x &#x3D; 对值随机取正负(x);y &#x3D; 对值随机取正负(y); 最终呈现效果如下： 当样本数量达到2000时，形状如上所示可以很明显的看到，在x轴方向，左右两端的密集程度明显高于圆心随机值在大量数据下会具有规律性，可以理解为当数据很多时，x的取值在(-r,r)大致为均匀分布的，y的取值亦是。当处于左右两端时，y的取值范围变小，视觉效果就显得紧凑了些。当然如果用概率论数理统计公式来验证会更有说服力，但可惜不会。。。（耸肩） 随机角度，在[0,360)内随机取得角度，然后在[0,r]范围内随机取值，然后使用sin和cos来求解x和y。java代码如下：1234567float[] ints &#x3D; new float[2];int degree &#x3D; mRandom.nextInt(360);double curR &#x3D; mRandom.nextInt(r)+1;float x &#x3D; (float) (curR * Math.cos(Math.toRadians(degree)));float y &#x3D; (float) (curR * Math.sin(Math.toRadians(degree)));x &#x3D; 对值随机取正负(x);y &#x3D; 对值随机取正负(y);最终呈现效果如下： 明显看到中心处的密集程度高于边缘地带，事实上当角度固定时，r在[0,R)范围内随机取值。当数量更大时，坐标点是均匀分布的。当r越小时，所占用的面积越小，就会显得粒子很密集。 随机角度，在[0,360)内随机取得角度，取[0,1]内的随机平方根再和R相乘，然后使用sin和cos来求解x和y。java代码如下：123456int degree &#x3D; mRandom.nextInt(360);double curR &#x3D; Math.sqrt(mRandom.nextDouble()) * r;float x &#x3D; (float) (curR * Math.cos(Math.toRadians(degree)));float y &#x3D; (float) (curR * Math.sin(Math.toRadians(degree)));x &#x3D; 对值随机取正负(x);y &#x3D; 对值随机取正负(y);最终呈现效果如下： 这次的视觉效果总算是达到了均匀的效果，这个算法是利用了一个根函数的特性，如下图:红色是根函数，蓝色是线性函数。两者相比下来，根函数的取值会更大些，相应的，接近边缘的点就会更多一点，让粒子的分布效果更加均衡。 处理“奋笔疾书”情况当以比较慢的速度滑动时，笔画尚显流畅无明显断层。当速度过快时，MOVE留下的点更少，且间距大。会出现画笔断层现象，这时候就需要一些特殊的处理方法。代码中设定了一个标准值D，这个值是由BasePen所持有的w和h两个值计算而来的，一般来说，这两个值期望为依附的View的宽高。最初也考虑使用画笔的直径计算，但考虑到画笔直径是可以外部动态改变的。标准值最好保持一定的独立性，其所依赖的数据越稳定越好，要不然会影响平衡。然后当MOVE时，当前点距离上一个点的相对距离大于这个标准值D时，就会判定此时处于快移速状态，间距越大移速越快，那么喷漆效果相应地就要减弱【直观而言就是粒子浓度要低】。快移速状态时，代码会在当前点和上一个点之间，模拟出一些笔迹点。相应地，这些笔迹点的粒子密集度会低一些，其计算函数且是一个反驼峰的变化状态。即连续笔迹点的中间点粒子最稀疏，两边则最密集。1234567891011121314151617181920212223242526272829303132 &#x2F;&#x2F;手速过快时float stepDis &#x3D; mPenR * 1.6f;&#x2F;&#x2F;笔迹点的数量int v &#x3D; (int) (getLastDis() &#x2F; stepDis);float gapX &#x3D; getPoints().get(getPoints().size() - 1).x - getPoints().get(getPoints().size() - 2).x;float gapY &#x3D; getPoints().get(getPoints().size() - 1).y - getPoints().get(getPoints().size() - 2).y;&#x2F;&#x2F;描绘笔迹点for (int i &#x3D; 1; i &lt;&#x3D; v; i++) &#123; float x &#x3D; (float) (getPoints().get(getPoints().size() - 2).x + (gapX * i * stepDis &#x2F; getLastDis())); float y &#x3D; (float) (getPoints().get(getPoints().size() - 2).y + (gapY * i * stepDis &#x2F; getLastDis())); drawSpray(x, y, (int) (mTotalNum * calculate(i, 1, v)), mRandom.nextBoolean()); &#125;&#x2F;** * 使用（x-（min+max）&#x2F;2)^2&#x2F;（min-（min+max）&#x2F;2）^2作为粒子密度比函数 *&#x2F; private static float calculate(int index, int min, int max) &#123; float maxProbability &#x3D; 0.6f; float minProbability &#x3D; 0.15f; if (max - min + 1 &lt;&#x3D; 4) &#123; return maxProbability; &#125; int mid &#x3D; (max + min) &#x2F; 2; int maxValue &#x3D; (int) Math.pow(mid - min, 2); float ratio &#x3D; (float) (Math.pow(index - mid, 2) &#x2F; maxValue); if (ratio &gt;&#x3D; maxProbability) &#123; return maxProbability; &#125; else if (ratio &lt;&#x3D; minProbability) &#123; return minProbability; &#125; else &#123; return ratio; &#125; &#125; Kotlin本项目在写的时候，顺便也写了一个Kotlin版本的。注意，并不是用AS自带的代码转换的。所以Kotlin版本会有很多不必要的测试体验代码，不要在意这些细节。Kotlin版本这里这里，喜欢的不妨点个赞吧 总结以上就是本次Demo的思路、以及一些算法的解析。数学之美，令人沉醉（数学学渣留下了悔恨的泪水。。。）数学才是本体啊笔刷项目地址在此，代码中的注释会更加清晰些，大家要是喜欢的话，不妨来点个赞吧 参考资料： 均匀的生成圆和三角形内的随机点","path":"2018/05/19/2018-05-19-pen/","date":"05-19","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"},{"name":"视觉设计","slug":"视觉设计","permalink":"https://ailo.fun/tags/%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20180519-blog-header-bg.jpg\""},{"title":"仿ios京东启动页“跳过”效果","text":"天共水，水远与天连天净水平寒月漾，水光月色两相兼 简单展示一下动画效果： 项目地址在此，大家若是喜欢的话，不妨点个赞吧好了，简单阐述一下本次动画的原理： 光的效果使用Paint设置Shader来实现，具体则是LinearGradient水平渐变渲染。光影的平移依赖于LinearGradient的setLocalMatrix，通过Matrix的translate来促使光影移动。 在自定义View的onSizeChanged(int w, int h, int oldw, int oldh)方法内初始化引擎：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); tryInitEngine(w); &#125; private void tryInitEngine(int w) &#123; if (mShadowMatrix &#x3D;&#x3D; null) &#123; if (w &gt; 0) &#123; &#x2F;&#x2F;控制阴影的Matrix，通过Matrix的变化来实现闪光的滑过效果 mShadowMatrix &#x3D; new Matrix(); &#x2F;&#x2F;因为使用了LinearGradient,所以Paint本身的color将毫无意义，所以colors的起始点的色值必须和本来色值一致 int currentTextColor &#x3D; getCurrentTextColor(); &#x2F;&#x2F;渐变色层.x0,y0是起点坐标，x1，y1是终点坐标 mLinearGradient &#x3D; new LinearGradient(0, 0, 50, 0, new int[] &#123;currentTextColor, Color.GREEN, currentTextColor&#125;, null, Shader.TileMode.CLAMP); &#x2F;&#x2F;画笔设置Shader getPaint().setShader(mLinearGradient); &#x2F;&#x2F;使用属性动画作为引擎，数值从-SHADOW变化到TextView本身的宽度。间隔时间未1500ms mValueAnimator &#x3D; ValueAnimator.ofFloat(-50, w).setDuration(1500); mValueAnimator.setInterpolator(new LinearInterpolator()); mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; float value &#x3D; (float) animation.getAnimatedValue(); &#x2F;&#x2F;Matrix移动来实现闪光滑动 mShadowMatrix.setTranslate(value, 0); invalidate(); &#125; &#125;); mValueAnimator.addListener(new AnimatorListenerAdapter() &#123; @Override public void onAnimationRepeat(Animator animation) &#123; super.onAnimationRepeat(animation); mShadowMatrix.reset(); &#125; @Override public void onAnimationEnd(Animator animation) &#123; super.onAnimationEnd(animation); mShadowMatrix.reset(); &#125; &#125;); mValueAnimator.setRepeatCount(mRepeatCount); &#125; &#125; &#125; 简要说明几个重要变量： mShadowMatrix,用来控制Shader位置的Matrix。 mLinearGradient,实现闪光效果的Shader，水平渐变层。 mValueAnimator，属性动画引擎。 这里面使用了一个LinearGradient线性渐变的着色器。着重说一下它的使用方法。先看一下LinearGradient的构造函数： 1234567891011121314151617 &#x2F;** Create a shader that draws a linear gradient along a line. @param x0 The x-coordinate for the start of the gradient line @param y0 The y-coordinate for the start of the gradient line @param x1 The x-coordinate for the end of the gradient line @param y1 The y-coordinate for the end of the gradient line @param colors The colors to be distributed along the gradient line @param positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. @param tile The Shader tiling mode *&#x2F; public LinearGradient(float x0, float y0, float x1, float y1, int colors[], float positions[], TileMode tile) &#123; ......... ..... ...... &#125; 这其中：x0，y0—-&gt;代表起点的坐标x1，y1—-&gt;代表终点的坐标colors—-&gt;colors表示渲染的颜色，它是一个颜色数组，数组长度必须大于等于2positions—-&gt;positions表示colors数组中几个颜色的相对位置，是一个float类型的数组，该数组的长度必须与colors数组的长度相同。如果这个参数使用null也可以，这时系统会按照梯度线来均匀分配colors数组中的颜色title—-&gt;代表了系统提供的几种渲染模式，这里选用了LinearGradient.TileMode.CLAMP模式，表示重复colors数组里的最后一种颜色直到该View结束的地方 这里我们来做个试验，将colors的最后一个色值改为Color.BLUE 1mLinearGradient &#x3D; new LinearGradient(0, 0, SHADOW_W, 0, new int[] &#123;currentTextColor, Color.GREEN, Color.BLUE&#125;, OK,看一下试验效果. 可见设置了ClAMP模式后，的确是将colors最后的一个色值覆盖到了未渲染区域 监听属性动画的数值更新，来触发重绘，OnDraw（）方法实现尤为简单。12345678@Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); Log.d(TAG, &quot;onDraw: &quot; + System.currentTimeMillis()); if (mLinearGradient !&#x3D; null) &#123; mLinearGradient.setLocalMatrix(mShadowMatrix); &#125; &#125; Matrix，改变位置即可实现光芒滑过效果 以上就是本次动画的简要原理阐述，项目地址在这里，个中原理已在注释上写的明明白白。FlickerTextView,大家喜欢的话不妨点个赞吧。基于需求的特殊性，本地动画使用了TextView。其实大可不必拘泥于此，本质上还是对Paint设置Shader的使用而已。","path":"2018/04/30/flickerView/","date":"04-30","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20180430-blog-header-bg.jpg"},{"title":"【闻弦歌】--初识音频","text":"学习的目的在于掌握以及更好地使用，学习的第一步就是认知。在音频学习时，我们首先要认知的就是声音。 声音是什么 声音由震动而生，它本质上是一种机械波。既然是波，就拥有波动传播的性质，例如频率、波长等。 对人而言，“声音”于生理学上的体现为大脑接受到的声音，和物理学定义有偏差。人类的耳朵一般只能听到约在20Hz至20,000 Hz（20kHz）范围内的声音，其上限会随年龄增加而降低，蚊音器【注1】就是利用了这种原理。 声音的采集与存储在了解声音采集以及存储之前，我们首先要认知两个概念。即模拟信号和数字信号。信号数据是可以用来表达任何信息的，例如图像、声音、文字等。对信号数据的了解，有利于我们理解声音采集存储的过程中，到底发生了什么。 模拟信号[ analog signal ], [Wiki百科] 是这样解释的： 模拟信号是在时域上数学形式为连续函数的信号，其主要利用对象的一些物理属性来表达传递信息。理论上来说，它的分辨率是接近无穷大的，信息密度大，不存在量化误差。代表着对自然界物理量的描述表达无限逼近真实。同时它也极其容易受干扰。例子：最开始的大哥大传输的就是模拟信号，所以那时候经常出现噪音，通话质量极差。 数字信号[Digital signal]，Wiki百科 解释如下： 数字信号是离散时间信号（discrete-time signal）的数字化表示。 狭义上来说，数字信号就是从模拟信号获取的。 OK，简要的说明了信号数据属性，概念总是苍白无力的，那么接下来我们用一个实际的例子来阐述以上两个属性的含义。就从麦克风录音——&gt;录音文件为例，在这个过程到底发生了什么转换，能让声音变成可播放文件的呢？ 录音解密对着麦克风录音时，麦克风【拾音设备】作了一轮声电转换，将机械振动信号转为模拟信号【在这里模拟信号的体现为连续电信号】。手机【或者计算机】是无法直接处理或存储模拟信号的，因为它是电信号。所以手机【或者计算机】内部会对模拟信号进行采样收集，转化为数字信号，这个过程称之为A/D，模数转换。在这个过程中，采样模拟的波形和原始波形的误差就是噪音了。当然，一定程度上设备的好坏也决定了噪音的程度。By the way，麦克风的工作原理： 麦克风里有一层薄且敏感的碳膜，声音经过时，会压缩空气导致碳膜挤压发生振动。碳膜下方有一个电极，碳膜振动时会接触电极，接触的长短和频率与声波的振幅和频率有关【注2】。这样就完成了第一轮声电转换。 有了录音，自然接下来就是播放了。接着我们会讲一下手机【或者计算机】是如何播放音频文件的。 音频播放 音响设备播放声音，需要连续的电波将音盆的磁圈振动。这个过程，要是向它输入数字信号，那可不好使。音响设备此时需要计算机对它输入模拟信号【有强弱变化的电流】，这个过程叫做D/A,数模转换。模拟信号和数字信号是不相通的，通过模数转换/数模转换来互通。譬如手机播放一个MP3，必须将这个MP3文件解码成模拟信号才能推动扬声器来振动产生声音。 好比是乐谱和演奏一样：A/D，模数转换就是将音乐写成乐谱。而D/A,数模转换，就是乐师将乐谱演奏出来。 音频学习学什么实际上对于APP应用层开发而言，A/D，模数转换和D/A,数模转换大多数情况下是不用接触的。对于Android平台而言，系统已经封装了相当完善的录音Api。它会直接提供给我们，经过A/D模数变换后的二进制序列 PCM文件 【该文件没有附加的文件头和文件结束标志】。而音频开发都是基于PCM文件的。 PCM文件PCM文件是对声音模拟信号的量化，是没有经过压缩的纯音频数据，只有PCM能直接进行声音处理【譬如变声器】。同理，PCM没有文件描述，所以不会有播放器支持播放PCM文件的音乐，除非已知采样率等信息。PCM作为声音的量化体现，主要有以下几个维度来描述声音： 采样率sampleRate，单位【khz】： 取样频率，每秒钟取得声音样本的次数。此值越高，则声音的还原度越高，同时占用的资源也会更多。 常见的有8khz【电话等使用】、22.05khz【广播】、44.1khz【CD音质】、48khz【数字电视】；常用采样率不会超过48khz 44.1khz是Android平台已知唯一兼容大多数固件的采样率 采样位数，单位【bit】： 每一个采样点的采样值，用来衡量声音波动变化的一个参数，也可以说是声卡的分辨率。数值越大，声音质量越好。 大小常为为4bit、8bit、16bit、32bit 声道数channel： 单声道 Mono 双声道 Stereo 用耳机举例，单声道并不是只有一个耳机喇叭发出声音。而是两个喇叭同时发出这个声道的声音。双声道就是两个耳机喇叭分别播出两个声道的声音。 对Android平台而言，立体声就是双声道。 时间 PCM文件计算大小衡量PCM文件数据单位时间内的容量大小，称之为比特率——即1s时间内的比特（bit）数目。那么，来计算一下一个 44.1khz 16bit 2channel的CD音质的比特率为： 144100*16*2&#x3D;1411200bps&#x3D;1411.2kbps 那么一段60s的CD音质的声音大小为：11411.2*60&#x2F;8&#x3D;10584KB&#x3D;10.34MB ok，接下来我们详细介绍一下，以上各个单位的换算详情。 比特率，数据传送速度单位,用来衡量带宽的，每s传输的二进制位数： Mbps 即 Milionbit pro second(百万位每秒)Kbps 即 Kilobit pro second（千位每秒）bps 即 bit pro second（位每秒）最小的单位就是bit，也是采样位数，通常缩写为b。这里要着重注意一下，要和另一个单位B区分开来。另，kbps和bps的换算单位也有争议，有的是1kbps=1024bps，有的则是1kbps=1000bps。我们之前计算的10.34MB，是以1000位基准计算的，参考的是wiki百科。 传输的字节数单位，Byte，通常用B表示： 这个才是通常软件上显示的下载速度，也是存储的硬盘上的字节数体现。MB即百万字节也称兆字节 KB即千字节B即字节,其换算单位为1024，公式为：1MB=1024KB=1024*1024B=1024*1024*8b所以，一般1M的网络带宽指的是：1Mbps。它下载的速度上限为：1Mbps=1000kbps=1000000bps。一秒钟走过了10^6个bit，那么换算为Bytes为： 110^6&#x2F;8&#x3D;125000 byte&#x2F;s&#x3D;122 KB&#x2F;s PS：有关1kbps=1024bps和1kbps=1000bps的用法依然是混乱的。作为万国共通的SI单位系「k」「M」等接头辞有着1000乘方的意义，IEEE和IEC等学会标准化团体等也正式地跟随这些的用法。但出于计算机初期软件和硬件设计上的情况，是把1024比特作为1000比特，结果在数据的容量和通信速率等中适用这个规则的人增多，导致了现在这样的混乱状态。在通讯的世界中，由于数据通讯开始之前就遵从SI单位系而使用1000倍，并且调制解调器的通信速率开始时也是使用75bps，300bps，1200bps等非2乘方的值，所以一般认为1kbps=1000bps是妥当的。大致来说，存储器和硬盘等存储容量一般使用「1024」，通信速率使用「1000」,但因为根据状况会有不同，需要充分注意使用的是哪边的意义 PCM文件格式可以直接作声音处理对一个PCM文件而言，以采样频率作为变量，其余属性不变。则采样频率越小，播放出来的声音越粗，速度越慢。采样频率越高，声音越细，速度越快。怎么样，是不是很熟悉呢？这种效果差不多就是变声器的原理了，不过变声器要比这个复杂的更多。 以上 注1：蚊音器，也叫蚊音警报器，是一种通过发出高频声音来制止年轻人集会的一种电器设备。最新的版本于2008年晚些时候上市，其可以设置两种频段。一种是大约17.4kHz[1]，一般只有年轻人可以听到的。另一种为8kHz，能被大多数人听到。其最大的前在输出的声压级为108dB。由于人耳朵的功能会随着年纪变化，因此此种声音只有差不多25岁以下的年轻人才听得到。注2：参考《音视频开发进阶指南》第一张第二节 参考资料： Mbps、Kbps、bps、kb、mb的区别，带宽换算 AD/DA转换、模拟、数字的扫盲贴","path":"2018/04/02/audio_start_learn/","date":"04-02","excerpt":"","tags":[{"name":"科普向","slug":"科普向","permalink":"https://ailo.fun/tags/%E7%A7%91%E6%99%AE%E5%90%91/"},{"name":"音频","slug":"音频","permalink":"https://ailo.fun/tags/%E9%9F%B3%E9%A2%91/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20180402-blog-header-bg.jpg"},{"title":"文字动次打次，让文字动态绘制出来","text":"本文属于Android技术论述文章，阅读完大致需要五分钟 原创文章，转载请注明出处。 没时间的小伙伴可以直接跳过文章，点击项目地址，如果喜欢的话，顺手给个star那是极好的【娇羞……】 二话不说，效果奉上！ 知识点序列： Canvas绘制 TextPaint Path PathMeasure【测量Path】 代码分析获取文字的轮廓Path在TextPaint中有这样一个方法，getTextPath,如下： 12345678public void getTextPath(String text, int start, int end, float x, float y, Path path) &#123; if ((start | end | (end - start) | (text.length() - end)) &lt; 0) &#123; throw new IndexOutOfBoundsException(); &#125; nGetTextPath(mNativePaint, mNativeTypeface, mBidiFlags, text, start, end, x, y, path.mutateNI()); &#125; 👀其中nGetTextPath里面是调用了一个原生函数，具体实现不必理会。只需要了解函数的各个参数就可以了。 参数含义： text：文本内容 start：需要测量的文本中的第一个字符的下标 end：需要测量的文本最后一个字符的下标加1 x：Path起点的坐标X y：Path起点的坐标Y path：最终测量得到的Path Path分段绘制PathMeasure这个类可以说是Path相关的工具解析类，里面大多是原生函数，实现细节不必深究。只需要会使用方法即可。第一步我们得到文字的轮廓Path之后，这一步将此path按段绘制出来即可。在代码中，由CanvasView这个类来具体实现绘制的详尽流程。看代码，将文本轮廓Path设置进来： 123456789101112131415161718&#x2F;&#x2F; 保留一份原始Path，用作绘制最终填色的文字 mOrignalPath &#x3D; orignalPath; if (null &#x3D;&#x3D; mPathMeasure) &#123; mPathMeasure &#x3D; new PathMeasure(); &#125; &#x2F;&#x2F;先重置一下需要显示动画的path mAnimPath.reset(); mAnimPath.moveTo(0, 0); mPathMeasure.setPath(orignalPath, false); &#x2F;&#x2F; getLength（）方法获得的是当前path的长度；而nextContour（）方法是将Path切换到下一段Path，多应用在复杂path中 mTextCount &#x3D; 0; &#x2F;&#x2F; 计算文字总共有多少段Path while (mPathMeasure.nextContour()) &#123; mTextCount++; &#125; &#x2F;&#x2F; PathMeasure重新设置一次 mPathMeasure.setPath(orignalPath, false); mPaint.setStyle(Paint.Style.STROKE); 其中成员变量mAnimPath，即是用在onDraw()方法内用于绘制的Path。我们会不停地通过PathMeasure刷新这个Path，用于动画流畅运行。 接下来是引擎代码，使用的是属性动画，看代码实现： 1234567891011121314151617181920212223242526272829if (null &#x3D;&#x3D; mValueAnimator) &#123; &#x2F;&#x2F; 如果一个文本Path包含n个小Path，那么属性动画会Repeat运行n次，每一段小path默认动画时间为900ms mValueAnimator &#x3D; ValueAnimator.ofFloat(0.0f, 1.0f); mValueAnimator.setDuration(900); mValueAnimator.setInterpolator(new LinearInterpolator()); &#125; &#x2F;&#x2F; 引擎无限次重复发动 mValueAnimator.setRepeatCount(ValueAnimator.INFINITE); mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; float value &#x3D; (float) animation.getAnimatedValue(); &#x2F;&#x2F; 将一段小Path从0%到100%赋值到mAnimPath中，调用重绘 mPathMeasure.getSegment(0, mPathMeasure.getLength() * value, mAnimPath, true); invalidate(); &#125; &#125;); mValueAnimator.addListener(new AnimatorListenerAdapter() &#123; @Override public void onAnimationRepeat(Animator animation) &#123; super.onAnimationRepeat(animation); &#x2F;&#x2F;绘制完一条Path之后，再绘制下一条，直到完成为止。 if (!mPathMeasure.nextContour()) &#123; animation.end(); &#125; invalidate(); &#125; &#125;); 注释里具体原因亦已写明。这种引擎的设置，就是每一小段Path不管长短，其绘制时间都是相等的，会造成动画看起来时慢时快。 其实要让动画一直匀速跑起来也很容易，就是提前将原始Path测量一遍，设置一个总时间，然后根据小Path的长短来按照比例分配时间。这样即可使动画匀速进行。具体代码不再多言😘，有兴趣的小伙伴可以试试。 再看看CanvasView内的onDraw()方法实现： 1234567891011@Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); if (null !&#x3D; mPathMeasure &amp;&amp; mPathMeasure.getLength() &#x3D;&#x3D; 0) &#123; mPaint.setStyle(Paint.Style.FILL); canvas.drawPath(mOrignalPath, mPaint); return; &#125; canvas.drawPath(mAnimPath, mPaint); &#125; 这里面的代码更加简单，在Path绘制完之前，一直绘制mAnimPath即可。Path绘制完之后，设置画笔的绘制风格，将文字空白处填上色即可。 以上。就是本次项目的主要思路解析。大家走过路过不要错过，给添个Star呗😄。","path":"2017/11/02/anim_text/","date":"11-02","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20170819-blog-header-bg.jpg"},{"title":"实现薄荷Loading动画","text":"本文属于Android技术论述文章，阅读完大致需要五分钟 原创文章，转载请注明出处。 没时间的小伙伴可以直接跳过文章，点击项目地址，如果喜欢的话，顺手给个star那是极好的【娇羞……】 好吧。先说一下为什么要做这个项目。前几天使用薄荷的时候，凑巧看到了这个Loading动画，觉得效果还不错。就想尝试着实现一下。先看一下原版的效果，GIF录制的比较快，但应该还可以看清楚。 先上本次最终实现的效果图吧，颜色当然选择今年最流行的原谅色： 思路分析 1、整个图形的形状如何绘制 2、如何让线条动起来 整个图形的形状分析 好了，首先我们来分析一下这个图案，如果是静态的，那么如何绘制？很简单，拆分。我们将图形拆开分解，然后再看。分析细节和步骤，这是要点。我这里将这个图分成了三份。 第一个，也就是叶柄。也就是下面那一条小小的竖线。原Loading图中不甚明显，但还是有的。叶柄没什么说的，直线就可以了。 第二个，叶子的左轮廓边缘和右轮廓边缘。这是一段下肥上窄的弧线，椭圆截取感觉不妥，我这里采用的是贝塞尔二阶曲线。有关Android贝塞尔相关的知识大家可以看看这篇文章。 第三个，也就是叶片的脉络，线和线交叉连接，没什么可说的。 那么重点其实就是叶子左右轮廓的绘制了，我画了一张草图。大家可以看看： 其中黑色的框作为View的边界。A点是左轮廓曲线的起点，B点事贝塞尔曲线的控制点，我把它定义到了View的左边框那里。C点事整个贝塞尔曲线的终点，D点则是实际上曲线的最高点。右轮廓则和左轮廓是镜像存在。图有点潦草，不过应该还看得懂。 好了，静态图形拆解完毕。接着看，如何让图动起来。 如何让线条动起来整个项目中，如何让线条真正的动起来才是要点。刚开始在这里的思路，是想使用canvas.drawCircle绘制在一张Bitmap上，以点汇面。后面实现起来发现，这种方式特别不靠谱。为什么不靠谱呢？因为点连接成线，每次移动的速率和距离都得计算，很麻烦。很容易出现断点的情况。最后，我采用的是让canvas去绘制一段Path路径，然后Path路径不停的刷新改变。这样做的好处，是Path更加直观易于控制。而且还不用多绘制一张Bitmap。整个项目中，自定义的View，LeafAnimView做的工作很少，只是在onDraw方法内，调起了绘制而已。具体的绘制都交给LeafAtom了。面向对象嘛。 具体的思路，是我把总时间按比例分成四部分。生成四个属性动画，在属性动画的监听里作Path的x和y的变化。在绘制的时候，只需要将这四个动画依次播放，即可得到每个时间段的具体运动值。而且还是均匀变化的。 LeafAnimView内部作为动画引擎的是一个ValueAnimator,使用它来触发View的onDraw。同时也使用它来控制整个动画的时间。 123456789mValueAnimator &#x3D; ValueAnimator.ofFloat(0, 1); mValueAnimator.setDuration(5000); mValueAnimator.setRepeatCount(ValueAnimator.INFINITE); mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; invalidate(); &#125; &#125;); LeafAtom类内部接受到这个总时长，然后将运动总时间分割，根据比例计算出绘制叶柄、左右轮廓、脉络的动画时间。 123456789101112131415161718192021222324252627282930313233343536-------在LeafAnimView类内部--------- @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); if (null &#x3D;&#x3D; mLeafAtom) &#123; &#x2F;&#x2F;传入总时长 mLeafAtom &#x3D; new LeafAtom(getWidth(), getHeight(), mValueAnimator.getDuration()); &#125; if (!mValueAnimator.isStarted()) &#123; mValueAnimator.start(); &#125; &#x2F;&#x2F;开始绘制 mLeafAtom.drawGraph(canvas, mPaint); &#125; -------在LeafAtome类---------------public static final float PETIOLE_RATIO &#x3D; 0.1f;&#x2F;&#x2F;叶柄所占比例public LeafAtom(int width, int height, long duration) &#123; mWidth &#x3D; width; mHeight &#x3D; height; mPetioleTime &#x3D; (long) (duration * PETIOLE_RATIO);&#x2F;&#x2F;绘制叶柄的时间 mArcTime &#x3D; (long) (duration * (1 - PETIOLE_RATIO) * 0.4f);&#x2F;&#x2F;左右轮廓弧线的时间 mLastLineTime &#x3D; duration - mPetioleTime - mArcTime * 2;&#x2F;&#x2F;最后一段叶脉的时间 mBezierBottom &#x3D; new PointF(mWidth * 0.5f, mHeight * (1 - PETIOLE_RATIO));&#x2F;&#x2F;左侧轮廓底部点 mBezierControl &#x3D; new PointF(0, mHeight * (1 - 3 * PETIOLE_RATIO));&#x2F;&#x2F;左侧轮廓控制点 mBezierTop &#x3D; new PointF(mWidth * 0.5f, 0);&#x2F;&#x2F;左侧轮廓顶部结束点 mVeinBottomY &#x3D; mHeight * (1 - PETIOLE_RATIO) - 10;&#x2F;&#x2F;右侧轮廓底部点Y轴坐标，稍稍低一点 mOneNodeY &#x3D; mVeinBottomY * 4 &#x2F; 5;&#x2F;&#x2F;第一个节点的Y轴坐标 mTwoNodeY &#x3D; mVeinBottomY * 2 &#x2F; 5;&#x2F;&#x2F;第二个节点Y轴坐标 initEngine(); setOrginalStatus(); &#125; 在LeafAtom的构造函数中，得到每一个阶段动画的时间，然后生成四个属性动画，在这个属性动画的监听里去做Path的x和y坐标的值变化。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&#x2F;** * 初始化path引擎 *&#x2F; private void initEngine() &#123; &#x2F;&#x2F;叶柄动画，Y轴变化由底部运动到叶柄高度的地方 mPetioleAnim &#x3D; ValueAnimator.ofFloat(mHeight, mHeight * (1 - PETIOLE_RATIO)).setDuration(mPetioleTime); &#x2F;&#x2F;左右轮廓贝塞尔曲线，只需要只奥时间变化是从0~1的。起点、控制点、结束点都知道了 mArcAnim &#x3D; ValueAnimator.ofFloat(0, 1.0f).setDuration(mArcTime); &#x2F;&#x2F;绘制叶脉的动画 mLastAnim &#x3D; ValueAnimator.ofFloat(mVeinBottomY, 0).setDuration(mLastLineTime); mPetioleAnim.setInterpolator(new LinearInterpolator()); mArcAnim.setInterpolator(new LinearInterpolator()); mLastAnim.setInterpolator(new LinearInterpolator()); mArcRightAnim &#x3D; mArcAnim.clone(); mPetioleAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mY &#x3D; (float) animation.getAnimatedValue(); &#125; &#125;); mArcAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; computeArcPointF(animation, true); &#125; &#125;); mArcRightAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; computeArcPointF(animation, false); &#125; &#125;); mLastAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mY &#x3D; (float) animation.getAnimatedValue(); float tan &#x3D; (float) Math.tan(Math.toRadians(30)); if (mY &lt;&#x3D; mOneNodeY &amp;&amp; mY &gt; mTwoNodeY) &#123; mOneLpath.moveTo(mX, mOneNodeY); mOneRpath.moveTo(mX, mOneNodeY); &#x2F;&#x2F;这里的参数x和y代表相对当前位置偏移量，y轴不加偏移量会空一截出来，这里的15是经验值 mMainPath.addPath(mOneLpath, 0, EXPRIENCE_OFFSET); mMainPath.addPath(mOneRpath, 0, EXPRIENCE_OFFSET); &#x2F;&#x2F;第一个节点和第二个节点之间 float gapY &#x3D; mOneNodeY - mY; mOneLpath.rLineTo(-gapY * tan, -gapY); mOneRpath.lineTo(mX + gapY * tan, mY); &#125; else if (mY &lt;&#x3D; mTwoNodeY) &#123; mTwoLpath.moveTo(mX, mTwoNodeY); mTwoRpath.moveTo(mX, mTwoNodeY); &#x2F;&#x2F;第二个节点，为避免线超出叶子，取此时差值的一半作计算 float gapY &#x3D; (mTwoNodeY - mY) * 0.5f; mMainPath.addPath(mTwoLpath, 0, EXPRIENCE_OFFSET); mMainPath.addPath(mTwoRpath, 0, EXPRIENCE_OFFSET); mTwoLpath.rLineTo(-gapY * tan, -gapY); mTwoRpath.rLineTo(gapY * tan, -gapY); &#125; &#125; &#125;); mEngine &#x3D; new AnimatorSet(); mEngine.playSequentially(mPetioleAnim, mArcAnim, mArcRightAnim, mLastAnim); mEngine.addListener(new AnimatorListenerAdapter() &#123; @Override public void onAnimationEnd(Animator animation) &#123; super.onAnimationEnd(animation); setOrginalStatus(); &#125; &#125;); &#125; 计算贝塞尔曲线运动过程中的方法。贝塞尔曲线是有一个函数的，我们知道起点、控制点、终点的话，就可以根据时间计算出此时此刻的x和y的坐标。而这个时间变化是从0~1变化的。谨记。 1234567891011121314151617private void computeArcPointF(ValueAnimator animation, boolean isLeft) &#123; float ratio &#x3D; (float) animation.getAnimatedValue(); &#x2F;&#x2F;ratio从0~1变化，左右轮廓三个点不一样 PointF bezierStart &#x3D; isLeft ? mBezierBottom : mBezierTop; PointF bezierControl &#x3D; isLeft ? mBezierControl : new PointF(mWidth, mHeight * (1 - 3 * PETIOLE_RATIO)); PointF bezierEnd &#x3D; isLeft ? mBezierTop : new PointF(mWidth * 0.5f, mVeinBottomY); PointF pointF &#x3D; calculateCurPoint(ratio, bezierStart, bezierControl, bezierEnd); mX &#x3D; pointF.x; mY &#x3D; pointF.y; &#125; private PointF calculateCurPoint(float t, PointF p0, PointF p1, PointF p2) &#123; PointF point &#x3D; new PointF(); float temp &#x3D; 1 - t; point.x &#x3D; temp * temp * p0.x + 2 * t * temp * p1.x + t * t * p2.x; point.y &#x3D; temp * temp * p0.y + 2 * t * temp * p1.y + t * t * p2.y; return point; &#125; 叶脉的绘制，在节点一和节点二，分别加上两个向左和向右伸展开的Path路径即可。 需要说明的是，lineTo和rLineTo的区别，lineTo的参数代表的就是目标参数，而rLineTo的参数代表的是，目标参数和起点参数的差值。 最后在drawGraph函数中，启动这个动画集合： 12345678public void drawGraph(Canvas canvas, Paint paint) &#123; if (mEngine.isStarted()) &#123; canvas.drawPath(mMainPath, paint); mMainPath.lineTo(mX, mY); &#125; else &#123; mEngine.start(); &#125; &#125; 以上，就是本次项目的主要思路了。相关注释代码里都写的很清楚了，项目地址在这里。仿薄荷Loading动画，大家走过路过千万别忘了给个Star啊。","path":"2017/08/19/bohe_path/","date":"08-19","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20170819-blog-header-bg.jpg"},{"title":"实用性MAX!像普通View一样自由使用的粒子组件","text":"原创文章，转载请注明出处。之前作过一篇萤火虫飞舞粒子效果，当时看还不错。无论是性能还是UI都满足了当时的设计效果，但实际应用到项目中，却发现由于SurfaceView其本身是绘制在window层面上的，对View本身的属性有很多的限制，用起来却不是很实在，还存在着很多不足。 于是便将之前的效果重新写了一下，改用继承View来实现，虽然说和SurfaceView相比，在绘制性能上有那么一丝丝的不足 。但轮子本质的含义还是为了服务于项目，项目中方便的使用才是最重要的。 阅读本文，大概需要三分半钟。如果需要直观看代码的话请点这里点这里！！首先看一下效果图 接着分析实现过程中的几个问题 如何保持不间断的绘制 粒子的运动轨迹控制（随机方向，碰到边界回弹以及旋转） 问题1：如何保持不间断的绘制​ View 的粒子绘制本身实在onDraw中进行的，所以最开始我的方案是在canvas绘制完一波之后，继续调用 invalidate()方法，这样就形成了一个死循环，就达到了不间断重复绘制的效果。 1234567891011@Overrideprotected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); canvas.save(); &#x2F;&#x2F;粒子的一波绘制 for (Particle circle : mCircles) &#123; circle.drawItem(canvas); &#125; canvas.restore(); invalidate();&#125; 这里需要注意的是，canvas的绘制是一个阻塞的过程，也就是从canvas.save()方法之后，一直到invalidate()之前，是阻塞的。 重绘是会一直等到所有的粒子绘制完成之后，才会继续调起的。 Tips： canvas的save和restore方法是搭配使用的。save存储之前的canvas状态，restore恢复save之前的状态。 save方法是可以多次使用的，可以搭配使用的是方法restoreToCount(saveCount)。参数saveCount从1开始计数，表示可以恢复到第几次save之前的状态。 ​ 这种方式的缺点在demo完成之后很明显的体现了出来。第一，速度不可控制，譬如有些时候恰恰需要粒子变慢一点呢。使用这种方式就不太好实现了。第二，粒子动画的播放和暂停实现起来不优雅，诚然写一个布尔值来控制也可以，但也难免………………太不优雅了吧。反正我个人是比较不喜欢写这种代码的。 ​ 那么，最终我的实现方式，是采用了属性动画来实现的，没错——就是ValueAnimator。来看代码： 123456789101112private ValueAnimator mParticleAnim;-----------------mParticleAnim &#x3D; ValueAnimator.ofInt(0).setDuration(30);mParticleAnim.setRepeatCount(ValueAnimator.INFINITE);mParticleAnim.addListener(new AnimatorListenerAdapter() &#123; @Override public void onAnimationRepeat(Animator animation) &#123; super.onAnimationRepeat(animation); Log.d(TAG, &quot;onAnimationRepeat: &quot; + System.currentTimeMillis()); invalidate(); &#125;&#125;); 这段代码展示出来，你懂得。 在一个无限循环的属性动画里，在Repeat监听事件里，调用View的invalidate方法重绘。这样每次触发重绘的时间间隔就是属性动画的持续时间。 要是想控制粒子的运动速率，那么只需要调整动画的持续时间即可。 而且如果要对外暴露粒子动画开始或者停止的方法，只需要控制属性动画的start和stop就行了。 问题2：粒子的运动轨迹​ 在构建轮子的时候，思路其实一直都很清晰。View层级主要是调起和控制绘制。具体要绘制什么东西和路线的控制都由粒子对象内部来实现。这样就可以贯彻单一原则，各自负责各自的东西，降低耦合性。 ​ 我们来看一下粒子对象Particle内的代码： 1234567891011121314151617181920212223242526272829303132333435public Particle(Bitmap drawBitmap, Matrix matrix, Paint paint, float x, float y, int width, int height) &#123; &#x2F;&#x2F;绘制的bitmap对象和矩阵对象，矩阵用来控制旋转和运动方向 mDrawBitmap &#x3D; drawBitmap; mBitmapMatrix &#x3D; matrix; mDrawBitmapWidth &#x3D; drawBitmap.getWidth(); mDrawBitmapHeight &#x3D; drawBitmap.getHeight(); mBitmapCenterX &#x3D; mDrawBitmapWidth &#x2F; 2f; mBitmapCenterY &#x3D; mDrawBitmapHeight &#x2F; 2f; &#x2F;&#x2F;画笔对象 mPaint &#x3D; paint; &#x2F;&#x2F;view 的宽和高用来判断边界 this.mWidth &#x3D; width; this.mHeight &#x3D; height; &#x2F;&#x2F;粒子运动的坐标 this.mX &#x3D; x; this.mY &#x3D; y; &#x2F;&#x2F;粒子的开始坐标 mStartX &#x3D; x; mStartY &#x3D; y; &#x2F;&#x2F;x 和y轴的运动方向选择，随机函数 mIsAddX &#x3D; mRandom.nextBoolean(); mIsAddY &#x3D; mRandom.nextBoolean(); setRandomParm();&#125;private void setRandomParm() &#123; &#x2F;&#x2F;x 和 y轴每次运动的距离和每次旋转的角度，随机值 mDisX &#x3D; mRandom.nextInt(2) + 1.2f; mDisY &#x3D; mRandom.nextInt(2) + 1.2f; mAddDegree &#x3D; mRandom.nextInt(5) + 3f;&#125; ​ 运动轨迹这方面只需要随机出来x和y轴的方向，还有每次递增或者递减的值即可。怎么样是不是丝毫没有技术难度啊。好了，看绘制和到边界的处理代码吧。 123456789101112131415161718192021222324252627282930313233343536public void drawItem(Canvas canvas) &#123; &#x2F;&#x2F;绘制 mBitmapMatrix.reset(); mBitmapMatrix.preTranslate(mX +&#x3D; getPNValue(mIsAddX, mDisX), mY +&#x3D; getPNValue(mIsAddY, mDisY)); mBitmapMatrix.preRotate(mDegrees +&#x3D; mAddDegree, mBitmapCenterX, mBitmapCenterY); canvas.drawBitmap(mDrawBitmap, mBitmapMatrix, mPaint); Log.d(TAG, &quot;mX : &quot; + mX); Log.d(TAG, &quot;mY : &quot; + mY); judgeOutline();&#125;private void judgeOutline() &#123; boolean judgeX &#x3D; mX &lt;&#x3D; 0 || mX &gt;&#x3D; (mWidth - mDrawBitmapWidth); boolean judgeY &#x3D; mY &lt;&#x3D; 0 || mY &gt;&#x3D; (mHeight - mDrawBitmapHeight); if (judgeX) &#123; mIsAddX &#x3D; !mIsAddX; mIsAddY &#x3D; mRandom.nextBoolean(); setRandomParm(); if (mX &lt;&#x3D; 0) &#123; mX &#x3D; 0; &#125; else &#123; mX &#x3D; mWidth - mDrawBitmapWidth; &#125; return; &#125; if (judgeY) &#123; mIsAddY &#x3D; !mIsAddY; mIsAddX &#x3D; mRandom.nextBoolean(); setRandomParm(); if (mY &lt;&#x3D; 0) &#123; mY &#x3D; 0; &#125; else &#123; mY &#x3D; mHeight - mDrawBitmapHeight; &#125; &#125;&#125; ​ 以上就是粒子对象内部的运动轨迹和边界判断代码了，怎样，是不是超级简单呢？ ​ 好了，如果你喜欢我的文章的话，那么请不要犹豫，给我一个star吧。GitHub地址：这里这里！！","path":"2017/06/28/android_partical/","date":"06-28","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20170628-blog-header-bg.jpg"},{"title":"低消耗、带回滚动画的仿探探交互效果","text":"原创文章，转载请注明出处。 前段时间项目中有一个仿探探的交互界面，写代码的过程中，觉得效果还不错。就把思路和原理记录了下来，分享一下。 先奉上GitHub地址，大家感兴趣可以来个starInfinateCard 套路还是要走一下的，先给大家看一下效果图: 真机上一点都不卡！一点都不卡！不卡！！！ 又学习了一些录制GIF的方法，这次来一张真机的效果！！ 会用到的知识点 Recyclerview的layoutManager实现布局 使用ItemTouchHelper处理滑动事件 手指滑动过程中，view的UI渐变（透明度或者其它） RecyclerView的ItemAnimator实现回滚动画 1、LayoutManger众所周知，Recyclerview之所以强大，完全在于它百变的适应性。它能实现任何你想要的布局样式，而它的奥秘就在于LayoutManger。 ​ 本次项目中我们UI效果仿照探探的样式，是卡牌样式的堆叠效果，按照List集合的顺序沿着Z轴纵向深处排列。这里有一个值得注意的Tip，子view是按照list集合的顺序去绘制的，也就是在这个我们自定义的LayoutManger里，第二个view会覆盖第一个，第三个会覆盖第二个，以此类推。如果我们想要第一眼就看到List集合的第一个，那么必须将list集合reverse后，再来绘制。 ​ 好了，我们来看代码。LayoutManger的精髓其实就在于onLayoutChildren（……）这个方法，通过这个方法来实现自定义的布局。 12345678910111213141516171819@Overridepublic void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; int itemCount &#x3D; getItemCount(); &#x2F;&#x2F; 代码的稳健之道，就在于该保护的地方一定要保护 if (itemCount &#x3D;&#x3D; 0) &#123; return; &#125; detachAndScrapAttachedViews(recycler); for (int position &#x3D; 0; position &lt; itemCount; position++) &#123; View view &#x3D; recycler.getViewForPosition(position); addView(view); measureChildWithMargins(view, 0, 0); int widthSpace &#x3D; getWidth() - getDecoratedMeasuredWidth(view); int heightSpace &#x3D; getHeight() - getDecoratedMeasuredHeight(view); &#x2F;&#x2F; recyclerview 布局 layoutDecoratedWithMargins(view, widthSpace &#x2F; 2, heightSpace &#x2F; 2, widthSpace &#x2F; 2 + getDecoratedMeasuredWidth(view), heightSpace &#x2F; 2 + getDecoratedMeasuredHeight(view)); &#125; ​ 很多人看到这里，肯定会喷出一句“卧槽！这就完了，就这点代码？” ​ 没错，如果不追求精细的话，这点代码确实可以搞定这个布局样式。现在我们来逐行分析一下代码。 detachAndScrapAttachedViews(recycler)这个方法就是将所有的view缓存在scrap里。Recyclerview有二级缓存，scrap和Recycle。使用Detach方式处理的view缓存在scrap里，用的时候不需要重新绑定数据。Remove方式处理的view缓存在Recycle里，使用的时候会重新绑定数据。 接下来的for循环代码就简单的多了，无非就是获得view的宽高信息，将其布局在Recyclerview内 当然，如果只是以上那些简单的代码，未免也太对不起Recyclerview了。毕竟Recyclerview最强大的地方就是对view的回收和利用了，要不然为什么叫Recycler呢。 对子view的回收利用​ 首先这种卡牌叠层的交互模式，不需要展示那么多的view，也就是我们仅仅需要让前几个view展示出来就可以了。其他的view，放在scrap缓存里即可。 12345678910111213141516171819202122232425262728293031@Overridepublic void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; int itemCount &#x3D; getItemCount(); &#x2F;&#x2F; 代码的稳健之道，就在于该保护的地方一定要保护 if (itemCount &#x3D;&#x3D; 0) &#123; return; &#125; detachAndScrapAttachedViews(recycler); &#x2F;&#x2F; 测量子view的位置信息并储存 for (int position &#x3D; 0; position &lt; itemCount; position++) &#123; &#x2F;&#x2F; 根据position获取一个碎片view，可以从回收的view中获取，也可能新构造一个 View view &#x3D; recycler.getViewForPosition(position); Log.d(TAG, &quot;recycler&quot; + view.getTag().toString()); addView(view); if (mViewInfo &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; 计算此碎片view包含边距的尺寸 measureChildWithMargins(view, 0, 0); &#x2F;&#x2F; getDecoratedMeasuredWidth方法是获取此碎片view包含边距和装饰的宽度width int widthSpace &#x3D; getWidth() - getDecoratedMeasuredWidth(view); int heightSpace &#x3D; getHeight() - getDecoratedMeasuredHeight(view); mViewInfo &#x3D; new Rect(); int left &#x3D; widthSpace &#x2F; 2; int top &#x3D; heightSpace &#x2F; 2; int right &#x3D; widthSpace &#x2F; 2 + getDecoratedMeasuredWidth(view); int bottom &#x3D; heightSpace &#x2F; 2 + getDecoratedMeasuredHeight(view); mViewInfo.set(left, top, right, bottom); &#125; detachAndScrapView(view, recycler); &#125; LayoutItems(recycler, state);&#125; 我们将view的位置信息使用一个Rect对象来保存，因为layoutDecorated(View child, int left, int top, int right, int bottom)这个函数的参数是整型。Rect和RecF两个对象最大的区别就是精度区别了。 然后将每个子view通过方法detachAndScrapView缓存到scrap内 最后通过LayoutItems(recycler, state)方法将需要展示的view展示出来，注释已经很清楚了哈 1234567891011121314151617181920212223&#x2F;** * 回收不需要的Item，并且将需要显示的Item从缓存中取出 *&#x2F;private void LayoutItems(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; &#x2F;&#x2F; 当数量大于临界点才需要回收view boolean isMeetNum &#x3D; getItemCount() &gt; CardConfig.MAX_SHOW_INDEX + 1; if (isMeetNum) &#123; for (int i &#x3D; CardConfig.MAX_SHOW_INDEX + 1; i &lt; getItemCount(); i++) &#123; View child &#x3D; recycler.getViewForPosition(i); removeAndRecycleView(child, recycler); &#125; &#125; &#x2F;&#x2F; 展示需要展示的view for (int i &#x3D; isMeetNum ? CardConfig.MAX_SHOW_INDEX : getItemCount() - 1; i &gt;&#x3D; 0; i--) &#123; View scrap &#x3D; recycler.getViewForPosition(i); measureChildWithMargins(scrap, 0, 0); addView(scrap); &#x2F;&#x2F;将这个item布局出来 layoutDecorated(scrap, mViewInfo.left, mViewInfo.top, mViewInfo.right, mViewInfo.bottom); int translateY &#x3D; i * CardConfig.CARD_VERTICAL_GAP; ViewCompat.setTranslationY(scrap, -translateY); &#125;&#125; 这个方法中，将不需要展示的view全部remove，然后将需要展示的view布局出来。 2、使用ItemTouchHelper实现滑动​ ItemTouchHelper是一个为Recyclerview提供 Swipe、drag、drop事件的工具类。使用方法也很简单，推荐大家看泡网的这一片入门文章，思路很清晰。 ​ 本次项目中使用的是ItemTouchHelper本身提供的一个帮助类 SimpleCallback，使用方法其实很简单。它的构造参数有两个值，一个是dragDirs长按的方向，另一个是swipeDirs滑动的方向。可以看看SImpleCallBack的源码： 1234public SimpleCallback(int dragDirs, int swipeDirs) &#123; mDefaultSwipeDirs &#x3D; swipeDirs; mDefaultDragDirs &#x3D; dragDirs;&#125; ​ 而我们只需要滑动，所以构造参数中只需要实现 swipe 即可： 12&#x2F;&#x2F;不支持长按拖拽，支持swipe，而且四个方向皆可以swipethis(0, ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT） ​ 然后应用此 ItemTouchHelper 即可： 123CardItemTouchHelperCallback cardCallback &#x3D; new CardItemTouchHelperCallback(mRecyclerView, mRecyclerView.getAdapter(), list);ItemTouchHelper touchHelper &#x3D; new ItemTouchHelper(cardCallback);touchHelper.attachToRecyclerView(mRecyclerView); ​ 到这里 Recyclerview已经实现了四个方向的滑动了，但滑动之后的操作还需要再实现一下。我们在 onSwiped(RecyclerView.ViewHolder viewHolder, int direction) 方法中实现 swipe之后的操作。这个方法有两个参数，viewHolder代表的就是此时滑动的viewholder，direction 代表的是这个view最终滑动的方向。在这个方法里，我们对数据源进行操作，然后刷新列表。 在Recyclerview的Adapter的数据刷新上，我使用了扩展包提供的 DiffUtils,是google提供的替换 notifyDataSetChanged()无脑刷 的方案。 ​ 最后在 onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) 方法中实现滑动时的动画。这个方法有多达七个参数，我来依次解释一下： c ，Recyclerview用来绘制children的画笔 recyclerView，额……就是所依赖的Recyclerview viewHolder，当下滑动的这个view的viewHolder dX、dY，手指在控制滑动的时候，此view水平X轴和垂直Y轴位移的距离，单位像素 actionState，标明此时是长按拖拽还是单纯的swipe isCurrentlyActive，标明此时滑动的view是处于手指控制状态，还是手指松开后的回弹动画状态 ​ 了解了参数之后，在这个方法中就可以实现滑动时的动画了。SimpleCallBack 默认的对滑动距离判断的条件是，水平方向是Recyclerview宽的一半，垂直方向是Recyclerview高的一半。 1234&#x2F;&#x2F;这个方法返回的值就是默认的阙值，想要更灵敏的话只需在自定义CallBack中重写这个方法，将值变小。更迟钝的话则反之public float getSwipeThreshold(ViewHolder viewHolder) &#123; return .5f;&#125; ​ 撸出来的代码如下： 1234567891011121314151617181920212223242526272829303132@Override public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) &#123; super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);&#x2F;&#x2F; Log.d(TAG, &quot;onChildDraw dX : &quot; + dX);&#x2F;&#x2F; Log.d(TAG, &quot;onChildDraw dY : &quot; + dY); Log.d(TAG, &quot;onChildDraw isCurrentlyActive: &quot; + isCurrentlyActive); if (mItemW &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F; Log.d(TAG, &quot;onChildDraw getAdapterPosition : &quot; + viewHolder.getAdapterPosition()); mItemW &#x3D; viewHolder.itemView.getWidth(); mHorJudgeDistance &#x3D; recyclerView.getWidth() * getSwipeThreshold(viewHolder); mVerJudgeDistance &#x3D; recyclerView.getHeight() * getSwipeThreshold(viewHolder); &#125; float ratio; if (Math.abs(dX) &gt; Math.abs(dY)) &#123; &#x2F;&#x2F;以宽为判定基准 ratio &#x3D; Math.abs(dX) &#x2F; mHorJudgeDistance; &#125; else &#123; &#x2F;&#x2F;以高为判定基准 ratio &#x3D; Math.abs(dY) &#x2F; mVerJudgeDistance; &#125; float realRatio &#x3D; ratio &gt;&#x3D; 1f ? 1f : ratio; ViewCompat.setAlpha(viewHolder.itemView, 1 - realRatio); boolean isMeetNum &#x3D; recyclerView.getLayoutManager().getItemCount() &gt; CardConfig.MAX_SHOW_COUNT + 1; int maxJudge &#x3D; isMeetNum ? CardConfig.MAX_SHOW_COUNT - 1 : (recyclerView.getLayoutManager().getItemCount() - 1); for (int i &#x3D; 1; i &lt;&#x3D; maxJudge; i++) &#123; View itemView &#x3D; recyclerView.findViewHolderForAdapterPosition(i).itemView; float v &#x3D; i * CardConfig.CARD_VERTICAL_GAP - realRatio * CardConfig.CARD_VERTICAL_GAP; ViewCompat.setTranslationY(itemView, -v); &#125; &#125; 3、使用ItenAnimator实现回滚动画​ ItemAnimator 我没有选择实现，而是使用了现成的轮子recyclerview-animators，没有选择远程库引入。而是将源代码copy进来，再进行了适当性的修改。 12mRecyclerView.setItemAnimator(new SlideAnimator());mRecyclerView.getItemAnimator().setAddDuration(250); ​ OK，到这里基本上就大功告成了，只剩下一些小细节和bug处理一下即可。在CallBack 类的 onSwipe 方法中将 direction 赋值到一个静态变量中，然后在 SlideAnimator 根据不同的方向实现不同的动画。 ​ 在实现过程中，我发现回滚动画的那个view居然不是滑走的view，就使用了一个单例来管理数据。动画开始时将数据设置为滑走的view的数据，动画结束后再将动画view的数据还原。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758@Overrideprotected void preAnimateAddImpl(RecyclerView.ViewHolder holder) &#123; Log.d(TAG, &quot;preAnimateAddImpl: &quot; + holder.itemView.getTag().toString()); DataExchangeMgr.getInstance().saveOrignData((int) holder.itemView.getTag(R.id.view_data)); &#x2F;&#x2F;根据不同的方向设置不同的初始值 if (isHorizDirection()) &#123; int width &#x3D; holder.itemView.getRootView().getWidth(); ViewCompat.setTranslationX(holder.itemView, CardConfig.sViewholderDirection &#x3D;&#x3D; ItemTouchHelper.LEFT ? -width : width); &#125; else &#123; int height &#x3D; holder.itemView.getRootView().getHeight(); ViewCompat.setTranslationY(holder.itemView, CardConfig.sViewholderDirection &#x3D;&#x3D; ItemTouchHelper.UP ? -height : height); &#125;&#125;@Overrideprotected void animateAddImpl(final RecyclerView.ViewHolder holder) &#123; &#x2F;&#x2F;根据不同的方向选择不同的动画 ViewPropertyAnimatorCompat viewPropertyAnimatorCompat &#x3D; ViewCompat.animate(holder.itemView) .setDuration(getAddDuration()) .setInterpolator(mInterpolator) .setListener(new DefaultAddVpaListener(holder) &#123; @Override public void onAnimationStart(View view) &#123; super.onAnimationStart(view); &#x2F;&#x2F;将此view数据设置为滑开的数据 ((ImageView) mViewHolder.itemView.findViewById(R.id.show_img)).setImageResource(DataExchangeMgr.getInstance().getCurrentData()); &#125; @Override public void onAnimationCancel(View view) &#123; super.onAnimationCancel(view); &#x2F;&#x2F;数据还原 ((ImageView) mViewHolder.itemView.findViewById(R.id.show_img)).setImageResource(DataExchangeMgr.getInstance().getOrignalData()); &#125; @Override public void onAnimationEnd(View view) &#123; super.onAnimationEnd(view); &#x2F;&#x2F;数据还原 ((ImageView) mViewHolder.itemView.findViewById(R.id.show_img)).setImageResource(DataExchangeMgr.getInstance().getOrignalData()); &#125; &#125;) .setStartDelay(50); if (isHorizDirection()) &#123; viewPropertyAnimatorCompat .translationX(0) .start(); &#125; else &#123; viewPropertyAnimatorCompat .translationY(0) .start(); &#125;&#125;private boolean isHorizDirection() &#123; return CardConfig.sViewholderDirection &#x3D;&#x3D; ItemTouchHelper.LEFT || CardConfig.sViewholderDirection &#x3D;&#x3D; ItemTouchHelper.RIGHT;&#125; 最后感兴趣的可以看看代码，奉上GitHub地址。InfinateCard","path":"2017/05/10/android-infinite-card/","date":"05-10","excerpt":"","tags":[{"name":"交互体验","slug":"交互体验","permalink":"https://ailo.fun/tags/%E4%BA%A4%E4%BA%92%E4%BD%93%E9%AA%8C/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20170510-blog-header-bg.jpg"},{"title":"Android萤火虫飞舞粒子效果","text":"GitHub地址 原创文章，转载请注明出处 萤火虫飞舞粒子效果 本项目中我提供了两种方案，最终呈现的效果如下： 先奉上GitHub地址戳这里，有兴趣的同鞋star一下咯 实现原理Android的粒子效果、粒子动画，已经有很多开源的轮子了。作为一个坚定的轮子主义者，我google了大半天，却没有找到这种类似于萤火虫飞舞的效果。只好自己来实现这种效果。 相比较普通的View，SurfaceView更加适合这种不断变化的画面，所以选择SurfaceView来实现。现在把思路再重新梳理一下： 大小不同的粒子在区域内随机分布 粒子做无规则运动，然后消失 粒子区域内随机分布这个简单，我们在callBack的方法内直接循环生成一个粒子的数组即可。方位的话使用Random即可。 1234567891011121314151617if (mCircles.size() &#x3D;&#x3D; 0) &#123; for (int i &#x3D; 0; i &lt; MAX_NUM; i++) &#123; FloatParticleLine f &#x3D; new FloatParticleLine(getF() * mMeasuredWidth, getF() * mMeasuredHeight, mMeasuredWidth, mMeasuredHeight); f.setRadius(mRandom.nextInt(2) + 1.2f); mCircles.add(f); &#125;&#125;private float getF() &#123; float v &#x3D; mRandom.nextFloat(); if (v &lt; 0.2f) &#123; return v + 0.2f; &#125; else if (v &gt;&#x3D; 0.85f) &#123; return v - 0.2f; &#125; else &#123; return v; &#125; &#125; getF（）方法是限制在区域内取值，mMeasuredWidth、mMeasuredHeight为SurfaceView的宽和高。 这里的宽和高在粒子对象FloatParticleLine，内会用到。 然后我们在创建一个线程，在run（）方法内做无线循环的绘制即可，为了避免无意义的绘制，可以使用Thread.sleep方法来控制帧数。 1234567891011121314151617181920212223while (isRun) &#123; try &#123; mCanvas &#x3D; mHolder.lockCanvas(null); if (mCanvas !&#x3D; null) &#123; synchronized (mHolder) &#123; &#x2F;&#x2F; 清屏 mCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR); for (FloatParticleLine circle : mCircles) &#123; circle.drawItem(mCanvas); &#125; &#x2F;&#x2F; 控制帧数 Thread.sleep(25); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (mCanvas !&#x3D; null) &#123; mHolder.unlockCanvasAndPost(mCanvas); &#125; &#125;&#125; isRun的变量我们会在SurfaceView内callBack的surfaceDestroyed方法中置为false 粒子做无规则运动 方案一 其实看到这种粒子效果，首先应该想到的就是Canvas了。 在SurfaceView里就是通过不断地循环调用FloatParticleLine类的drawItem（）方法来实现粒子的运动。我第一种方案的实现，就是每一个粒子在被创建出来的时候，就随机选择一个方向开始运动，滑过一定的轨迹之后让其消失就好了。 至于怎么选择随机方向，我这里的做法是，分别随机生成一个x和y轴上的递增或者递减的数值，然后每次在前一次绘制的基础上，x和y分别递增递减，直到运动到屏幕边缘或者是规定的运动距离满足了再消失即可。 12345678910111213&#x2F;&#x2F;随机生成参数private void setRandomParm() &#123; &#x2F;&#x2F; 2017&#x2F;5&#x2F;2-上午10:47 x和y的方向 mIsAddX &#x3D; mRandom.nextBoolean(); mIsAddY &#x3D; mRandom.nextBoolean(); &#x2F;&#x2F; 2017&#x2F;5&#x2F;2-上午10:47 x和y的取值 mDisX &#x3D; mRandom.nextInt(2) + 0.2f; mDisY &#x3D; mRandom.nextInt(2) + 0.3f; &#x2F;&#x2F; 2017&#x2F;5&#x2F;2-上午10:47 内部区域的运动最远距离 mDistance &#x3D; mRandom.nextInt((int) (0.25f * mWidth)) + (0.125f * mWidth);&#125; 绘制图形： 1234567891011121314151617181920212223242526272829303132public void drawItem(Canvas canvas) &#123; if (mX &#x3D;&#x3D; mStartX) &#123; mPaint.setAlpha(ALPHA_MAX); &#125; &#x2F;&#x2F;绘制 canvas.drawCircle(mX +&#x3D; getPNValue(mIsAddX, mDisX), mY +&#x3D; getPNValue(mIsAddY, mDisY), mRadius, mPaint); &#x2F;&#x2F;内部区域运动到一定距离消失 if (judgeInner()) &#123; float gapX &#x3D; Math.abs(mX - mStartX); float ratio &#x3D; 1 - (gapX &#x2F; mDistance); mPaint.setAlpha((int) (255 * ratio)); mRadius &#x3D; mStartRadius * ratio; if (gapX &gt;&#x3D; mDistance || mY - mStartY &gt;&#x3D; mDistance) &#123; resetDisXY(); return; &#125; return; &#125; &#x2F;&#x2F;外部区域运动到屏幕边缘消失 if (judgeOutline()) &#123; resetDisXY(); &#125;&#125;private void resetDisXY() &#123; setRandomParm(); mPaint.setAlpha(0); mX &#x3D; mStartX; mY &#x3D; mStartY; mRadius &#x3D; mStartRadius; &#125; judgeInner()和judgeOutline()是判断区域的方法，内部区域的点和外部区域的店消失时机不同 在透明度为0也就是粒子消失时，让粒子回到原点，再重新选择一个方向，进行下一步运动轨迹。 方案二 方案二粒子做的运动是贝塞尔曲线，函数实在网上找到的一个函数。每当粒子做完一次曲线运动后，再随机生成一段新的贝塞尔曲线即可。 思路和方案一的思路都是一样的，无非就是运动的轨迹不同而已。 总结做完之后回头再看，发现这个项目的原理其实并不难，可以说是简单了。但刚开始起步的时候真的还是比较懵的，原因就是没有思路。 所以做任何效果，思路最重要。","path":"2017/04/28/android-firefly/","date":"04-28","excerpt":"","tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"}],"preview":"https://raw.githubusercontent.com/JadynAi/oldpage.io/master/img/20170428-blog-header-bg.jpg"},{"title":"Hello World","text":"Hello World","path":"2017/04/28/hello-world/","date":"04-28","excerpt":"","tags":[]}],"categories":[],"tags":[{"name":"Canvas动画","slug":"Canvas动画","permalink":"https://ailo.fun/tags/Canvas%E5%8A%A8%E7%94%BB/"},{"name":"Compose","slug":"Compose","permalink":"https://ailo.fun/tags/Compose/"},{"name":"Android","slug":"Android","permalink":"https://ailo.fun/tags/Android/"},{"name":"音视频","slug":"音视频","permalink":"https://ailo.fun/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"},{"name":"视频","slug":"视频","permalink":"https://ailo.fun/tags/%E8%A7%86%E9%A2%91/"},{"name":"MediaCodeC","slug":"MediaCodeC","permalink":"https://ailo.fun/tags/MediaCodeC/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://ailo.fun/tags/OpenGL/"},{"name":"算法","slug":"算法","permalink":"https://ailo.fun/tags/%E7%AE%97%E6%B3%95/"},{"name":"技术讨论","slug":"技术讨论","permalink":"https://ailo.fun/tags/%E6%8A%80%E6%9C%AF%E8%AE%A8%E8%AE%BA/"},{"name":"交互体验","slug":"交互体验","permalink":"https://ailo.fun/tags/%E4%BA%A4%E4%BA%92%E4%BD%93%E9%AA%8C/"},{"name":"视觉设计","slug":"视觉设计","permalink":"https://ailo.fun/tags/%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/"},{"name":"科普向","slug":"科普向","permalink":"https://ailo.fun/tags/%E7%A7%91%E6%99%AE%E5%90%91/"},{"name":"音频","slug":"音频","permalink":"https://ailo.fun/tags/%E9%9F%B3%E9%A2%91/"}]}